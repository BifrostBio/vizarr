{"version":3,"mappings":"0xBAAA,IAAIA,EAAmBC,EAEvB,SAASA,EAASC,EAAIC,EAAMC,EAAW,CACrC,IAAIC,EAAU,KACVC,EAAc,KAEdC,EAAQ,UAAW,CACjBF,IACF,aAAaA,CAAO,EAEpBC,EAAc,KACdD,EAAU,KAEhB,EAEMG,EAAQ,UAAW,CACrB,IAAIC,EAAOH,EACXC,IAEIE,GACFA,GAEN,EAEMC,EAAkB,UAAW,CAC/B,GAAI,CAACP,EACH,OAAOD,EAAG,MAAM,KAAM,SAAS,EAGjC,IAAIS,EAAU,KACVC,EAAO,UACPC,EAAUT,GAAa,CAACC,EAkB5B,GAjBAE,IAEAD,EAAc,UAAW,CACvBJ,EAAG,MAAMS,EAASC,CAAI,CAC5B,EAEIP,EAAU,WAAW,UAAW,CAG9B,GAFAA,EAAU,KAEN,CAACQ,EAAS,CACZ,IAAIJ,EAAOH,EACX,OAAAA,EAAc,KAEPG,EAAI,CACZ,CACF,EAAEN,CAAI,EAEHU,EACF,OAAOP,EAAW,CAExB,EAEE,OAAAI,EAAgB,OAASH,EACzBG,EAAgB,MAAQF,EAEjBE,CACT,CCvDA,eAAeI,EAAUC,EAA6B,CACpD,KAAM,CAAE,SAAAC,CAAa,QAAAC,EAAA,IAAM,OAAO,qBAAW,OAAAC,KAAA,wEACjC,MAAMF,EAAS,SAAS,CAClC,KAAM,SACN,YAAa,wFACb,QAASG,CAAO,CACjB,GACG,OAAO,CACT,UAAWJ,EAAO,SAClB,eAAgBA,EAAO,aACxB,CACH,CAEA,SAASK,EAAkBL,EAA6B,CACtD,MAAMM,EAAM,IAAI,IAAI,OAAO,SAAS,IAAI,EAExC,GAAI,CAACA,EAAI,aAAa,IAAI,QAAQ,EAChC,OAIF,GAAIA,EAAI,aAAa,IAAI,WAAW,EAAG,CACrC,MAAMC,EAAY,KAAK,MAAMD,EAAI,aAAa,IAAI,WAAW,CAAE,EAC/DN,EAAO,aAAaO,CAAS,CAC/B,CAIOP,EAAA,GACL,kBACAd,EAAUsB,GAA6B,CACrC,MAAMF,EAAM,IAAI,IAAI,OAAO,SAAS,IAAI,EACxCA,EAAI,aAAa,IAAI,YAAa,KAAK,UAAUE,CAAM,CAAC,EACjD,eAAQ,UAAU,CAAC,EAAG,GAAI,mBAAmBF,EAAI,IAAI,CAAC,GAC5D,GAAG,GAIR,MAAMG,EAAc,GAEpB,SAAW,CAACC,EAAKC,CAAK,IAAKL,EAAI,aAC7BG,EAAOC,CAAG,EAAIC,EAIhBX,EAAO,SAASS,CAAM,EAEhB,MAAAG,EAAc,mBAAmBN,EAAI,IAAI,EAG3C,OAAO,SAAS,OAASM,GAC3B,OAAO,QAAQ,UAAU,KAAM,GAAIA,CAAW,CAElD,CAEA,eAAeC,GAAO,CACpB,QAAQ,IAAI,WAAWT,CAAc,sCAAsC,EAE3E,MAAMJ,EAAS,MAAMc,EAAoB,SAAS,cAAc,OAAO,CAAE,EAGrE,UAAO,OAAS,OAAO,IAAK,CAC9Bf,EAAUC,CAAM,EAChB,MACF,CAEAK,EAAkBL,CAAM,CAC1B,CAEAa,EAAK","names":["functionDebounce","debounce","fn","wait","callFirst","timeout","debouncedFn","clear","flush","call","debounceWrapper","context","args","callNow","initImjoy","viewer","imjoyRPC","__vitePreload","n","vizarr.version","initStandaloneApp","url","viewState","update","config","key","value","newLocation","main","vizarr.createViewer"],"sources":["../node_modules/just-debounce-it/index.mjs","../main.ts"],"sourcesContent":["var functionDebounce = debounce;\n\nfunction debounce(fn, wait, callFirst) {\n  var timeout = null;\n  var debouncedFn = null;\n\n  var clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n\n      debouncedFn = null;\n      timeout = null;\n    }\n  };\n\n  var flush = function() {\n    var call = debouncedFn;\n    clear();\n\n    if (call) {\n      call();\n    }\n  };\n\n  var debounceWrapper = function() {\n    if (!wait) {\n      return fn.apply(this, arguments);\n    }\n\n    var context = this;\n    var args = arguments;\n    var callNow = callFirst && !timeout;\n    clear();\n\n    debouncedFn = function() {\n      fn.apply(context, args);\n    };\n\n    timeout = setTimeout(function() {\n      timeout = null;\n\n      if (!callNow) {\n        var call = debouncedFn;\n        debouncedFn = null;\n\n        return call();\n      }\n    }, wait);\n\n    if (callNow) {\n      return debouncedFn();\n    }\n  };\n\n  debounceWrapper.cancel = clear;\n  debounceWrapper.flush = flush;\n\n  return debounceWrapper;\n}\n\nexport {functionDebounce as default};\n","import * as vizarr from './src/index';\nimport debounce from 'just-debounce-it';\n\nasync function initImjoy(viewer: vizarr.VizarrViewer) {\n  const { imjoyRPC } = await import('imjoy-rpc');\n  const api = await imjoyRPC.setupRPC({\n    name: 'vizarr',\n    description: 'A minimal, purely client-side program for viewing Zarr-based images with Viv & ImJoy.',\n    version: vizarr.version,\n  });\n  api.export({\n    add_image: viewer.addImage,\n    set_view_state: viewer.setViewState,\n  });\n}\n\nfunction initStandaloneApp(viewer: vizarr.VizarrViewer) {\n  const url = new URL(window.location.href);\n\n  if (!url.searchParams.has('source')) {\n    return;\n  }\n\n  // see if we have initial viewState\n  if (url.searchParams.has('viewState')) {\n    const viewState = JSON.parse(url.searchParams.get('viewState')!);\n    viewer.setViewState(viewState);\n  }\n\n  // Add event listener to sync viewState as query param.\n  // Debounce to limit how quickly we are pushing to browser history\n  viewer.on(\n    'viewStateChange',\n    debounce((update: vizarr.ViewState) => {\n      const url = new URL(window.location.href);\n      url.searchParams.set('viewState', JSON.stringify(update));\n      window.history.pushState({}, '', decodeURIComponent(url.href));\n    }, 200)\n  );\n\n  // parse image config\n  const config: any = {};\n\n  for (const [key, value] of url.searchParams) {\n    config[key] = value;\n  }\n\n  // Make sure the source URL is decoded.\n  viewer.addImage(config);\n\n  const newLocation = decodeURIComponent(url.href);\n\n  // Only update history if the new loacation is different from the current\n  if (window.location.href !== newLocation) {\n    window.history.pushState(null, '', newLocation);\n  }\n}\n\nasync function main() {\n  console.log(`vizarr v${vizarr.version}: https://github.com/hms-dbmi/vizarr`);\n\n  const viewer = await vizarr.createViewer(document.querySelector('#root')!);\n\n  // enable imjoy api when loaded as an iframe\n  if (window.self !== window.top) {\n    initImjoy(viewer);\n    return;\n  }\n\n  initStandaloneApp(viewer);\n}\n\nmain();\n"],"file":"index-abaa7e72.js"}