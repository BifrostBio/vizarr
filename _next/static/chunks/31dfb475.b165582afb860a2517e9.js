(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[6],{c4fQ:function(module,exports,__webpack_require__){var factory;window,factory=function(){return function(I){var c={};function g(l){if(c[l])return c[l].exports;var n=c[l]={i:l,l:!1,exports:{}};return I[l].call(n.exports,n,n.exports,g),n.l=!0,n.exports}return g.m=I,g.c=c,g.d=function(I,c,l){g.o(I,c)||Object.defineProperty(I,c,{enumerable:!0,get:l})},g.r=function(I){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},g.t=function(I,c){if(1&c&&(I=g(I)),8&c)return I;if(4&c&&"object"===typeof I&&I&&I.__esModule)return I;var l=Object.create(null);if(g.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:I}),2&c&&"string"!=typeof I)for(var n in I)g.d(l,n,function(c){return I[c]}.bind(null,n));return l},g.n=function(I){var c=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(c,"a",c),c},g.o=function(I,c){return Object.prototype.hasOwnProperty.call(I,c)},g.p="",g(g.s="./src/main.js")}({"./node_modules/worker-loader/dist/workers/InlineWorker.js":function(module,exports,__webpack_require__){"use strict";eval("\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzPzc3ODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMzQzOTEzL2hvdy10by1jcmVhdGUtYS13ZWItd29ya2VyLWZyb20tYS1zdHJpbmdcblxudmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgdXJsKSB7XG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XG5cbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuXG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuXG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGhlIHByb3Bvc2VkIEFQSVxuICAgICAgICBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoJ2RhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0lubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/workers/InlineWorker.js\n")},"./package.json":function(module){eval('module.exports = JSON.parse("{\\"name\\":\\"imjoy-rpc\\",\\"version\\":\\"0.2.19\\",\\"description\\":\\"Remote procedure calls for ImJoy.\\",\\"module\\":\\"index.js\\",\\"scripts\\":{\\"build\\":\\"rm -rf dist && npm run build-umd\\",\\"build-umd\\":\\"webpack --config webpack.config.js --mode development && NODE_ENV=production webpack --config webpack.config.js --mode production --devtool source-map \\",\\"watch\\":\\"NODE_ENV=production webpack --watch --progress --config webpack.config.js --mode production --devtool source-map\\",\\"publish-npm\\":\\"npm install && npm run build && npm publish\\",\\"serve\\":\\"webpack-dev-server\\",\\"stats\\":\\"webpack --profile --json > stats.json\\",\\"stats-prod\\":\\"webpack --profile --json --mode production > stats-prod.json\\",\\"analyze\\":\\"webpack-bundle-analyzer -p 9999 stats.json\\",\\"analyze-prod\\":\\"webpack-bundle-analyzer -p 9999 stats-prod.json\\",\\"clean\\":\\"rimraf dist/*\\",\\"deploy\\":\\"npm run build && node deploy-site.js\\",\\"format\\":\\"prettier --write \\\\\\"{src,tests}/**/**\\\\\\"\\",\\"check-format\\":\\"prettier --check \\\\\\"{src,tests}/**/**\\\\\\"\\",\\"test\\":\\"karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\\",\\"test-watch\\":\\"karma start --auto-watch --browsers Chrome,FirefoxHeadless karma.conf.js --debug\\"},\\"repository\\":{\\"type\\":\\"git\\",\\"url\\":\\"git+https://github.com/imjoy-team/imjoy-rpc.git\\"},\\"keywords\\":[\\"imjoy\\",\\"rpc\\"],\\"author\\":\\"imjoy-team <imjoy.team@gmail.com>\\",\\"license\\":\\"MIT\\",\\"bugs\\":{\\"url\\":\\"https://github.com/imjoy-team/imjoy-rpc/issues\\"},\\"homepage\\":\\"https://github.com/imjoy-team/imjoy-rpc\\",\\"dependencies\\":{},\\"devDependencies\\":{\\"@babel/core\\":\\"^7.0.0-beta.39\\",\\"@babel/plugin-syntax-dynamic-import\\":\\"^7.0.0-beta.39\\",\\"@babel/polyfill\\":\\"^7.0.0-beta.39\\",\\"@babel/preset-env\\":\\"^7.0.0-beta.39\\",\\"@types/requirejs\\":\\"^2.1.28\\",\\"babel-core\\":\\"^6.26.0\\",\\"babel-eslint\\":\\"^10.1.0\\",\\"babel-loader\\":\\"^8.1.0\\",\\"babel-runtime\\":\\"^6.26.0\\",\\"chai\\":\\"^4.2.0\\",\\"clean-webpack-plugin\\":\\"^0.1.19\\",\\"copy-webpack-plugin\\":\\"^5.0.5\\",\\"eslint\\":\\"^6.8.0\\",\\"eslint-config-prettier\\":\\"^4.2.0\\",\\"eslint-loader\\":\\"^4.0.2\\",\\"file-loader\\":\\"^0.11.2\\",\\"fs-extra\\":\\"^0.30.0\\",\\"gh-pages\\":\\"^2.0.1\\",\\"html-loader\\":\\"^0.5.5\\",\\"html-webpack-plugin\\":\\"^3.2.0\\",\\"json-loader\\":\\"^0.5.4\\",\\"karma\\":\\"^4.4.1\\",\\"karma-chrome-launcher\\":\\"^3.1.0\\",\\"karma-firefox-launcher\\":\\"^1.3.0\\",\\"karma-mocha\\":\\"^1.3.0\\",\\"karma-spec-reporter\\":\\"0.0.32\\",\\"karma-webpack\\":\\"^4.0.2\\",\\"lerna\\":\\"^3.8.0\\",\\"lodash.debounce\\":\\"^4.0.8\\",\\"mocha\\":\\"^7.1.2\\",\\"postcss\\":\\"^6.0.2\\",\\"prettier\\":\\"^1.6.1\\",\\"rimraf\\":\\"^2.6.2\\",\\"schema-utils\\":\\"^0.4.3\\",\\"socket.io-client\\":\\"^2.3.0\\",\\"style-loader\\":\\"^0.18.1\\",\\"url-loader\\":\\"^0.5.9\\",\\"webpack\\":\\"^4.0.0\\",\\"webpack-bundle-analyzer\\":\\"^3.3.2\\",\\"webpack-cli\\":\\"^3.1.2\\",\\"webpack-dev-server\\":\\"^3.1.1\\",\\"webpack-merge\\":\\"^4.1.1\\",\\"workbox-webpack-plugin\\":\\"^4.3.1\\",\\"worker-loader\\":\\"^2.0.0\\",\\"write-file-webpack-plugin\\":\\"^4.5.1\\"},\\"eslintConfig\\":{\\"globals\\":{\\"document\\":true,\\"window\\":true}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package.json\n')},"./src/main.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "waitForInitialization", function() { return waitForInitialization; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupRPC", function() { return setupRPC; });\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin.webworker.js */ "./src/plugin.webworker.js");\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pluginIframe.js */ "./src/pluginIframe.js");\n/* harmony import */ var _pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginWebPython.js */ "./src/pluginWebPython.js");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rpc.js */ "./src/rpc.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RPC", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__["RPC"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "API_VERSION", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__["API_VERSION"]; });\n\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../package.json */ "./package.json");\nvar _package_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ "./package.json", 1);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return _package_json__WEBPACK_IMPORTED_MODULE_5__["version"]; });\n\n/**\n * Contains the code executed in the sandboxed frame under web-browser\n *\n * Tries to create a Web-Worker inside the frame and set up the\n * communication between the worker and the parent window. Some\n * browsers restrict creating a worker inside a sandboxed iframe - if\n * this happens, the plugin initialized right inside the frame (in the\n * same thread)\n */\n\n\n\n\n\n\n\nfunction _inIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n/**\n * Initializes the plugin inside a web worker. May throw an exception\n * in case this was not permitted by the browser.\n */\n\n\nfunction setupWebWorker(config) {\n  if (!config.allow_execution) throw new Error("web-worker plugin can only work with allow_execution=true");\n  const worker = new _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default.a(); // mixed content warning in Chrome silently skips worker\n  // initialization without exception, handling this with timeout\n\n  const fallbackTimeout = setTimeout(function () {\n    worker.terminate();\n    console.warn(`Plugin failed to start as a web-worker, running in an iframe instead.`);\n    Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__["default"])(config);\n  }, 2000);\n  const peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["randId"])(); // forwarding messages between the worker and parent window\n\n  worker.addEventListener("message", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.type === "worker-ready") {\n      // send config to the worker\n      worker.postMessage({\n        type: "connectRPC",\n        config: config\n      });\n      clearTimeout(fallbackTimeout);\n      return;\n    } else if (m.type === "initialized") {\n      // complete the missing fields\n      m.config = Object.assign({}, config, m.config);\n      m.origin = window.location.origin;\n      m.peer_id = peer_id;\n    } else if (m.type === "imjoy_remote_api_ready") {\n      // if it\'s a webworker, there will be no api object returned\n      window.dispatchEvent(new CustomEvent("imjoy_remote_api_ready", {\n        detail: null\n      }));\n    } else if (m.type === "cacheRequirements" && typeof cache_requirements === "function") {\n      cache_requirements(m.requirements);\n    } else if (m.type === "disconnect") {\n      worker.terminate();\n    } else {\n      if (m.__transferables__) {\n        transferables = m.__transferables__;\n        delete m.__transferables__;\n      }\n    }\n\n    parent.postMessage(m, config.target_origin || "*", transferables);\n  });\n  window.addEventListener("message", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.__transferables__) {\n      transferables = m.__transferables__;\n      delete m.__transferables__;\n    }\n\n    if (m.peer_id === peer_id) {\n      worker.postMessage(m, transferables);\n    } else if (config.debug) {\n      console.log(`connection peer id mismatch ${m.peer_id} !== ${peer_id}`);\n    }\n  });\n}\n\nfunction waitForInitialization(config) {\n  if (!_inIframe()) {\n    throw new Error("waitForInitialization (imjoy-rpc) should only run inside an iframe.");\n  }\n\n  config = config || {};\n  const targetOrigin = config.target_origin || "*";\n\n  if (config.credential_required && typeof config.verify_credential !== "function") {\n    throw new Error("Please also provide the `verify_credential` function with `credential_required`.");\n  }\n\n  if (config.credential_required && targetOrigin === "*") {\n    throw new Error("`target_origin` was set to `*` with `credential_required=true`, there is a security risk that you may leak the credential to website from other origin. Please specify the `target_origin` explicitly.");\n  }\n\n  const done = () => {\n    window.removeEventListener("message", handleEvent);\n  };\n\n  const peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["randId"])();\n\n  const handleEvent = e => {\n    if (e.type === "message" && (targetOrigin === "*" || e.origin === targetOrigin)) {\n      if (e.data.type === "initialize") {\n        done();\n\n        if (e.data.peer_id !== peer_id) {\n          // TODO: throw an error when we are sure all the peers will send the peer_id\n          console.warn(`${e.data.config && e.data.config.name}: connection peer id mismatch ${e.data.peer_id} !== ${peer_id}`);\n        }\n\n        const cfg = e.data.config; // override the target_origin setting if it\'s configured by the rpc client\n        // otherwise take the setting from the core\n\n        if (targetOrigin !== "*") {\n          cfg.target_origin = targetOrigin;\n        }\n\n        if (config.credential_required) {\n          config.verify_credential(cfg.credential).then(result => {\n            if (result && result.auth && !result.error) {\n              // pass the authentication information with tokens\n              cfg.auth = result.auth;\n              setupRPC(cfg).then(() => {\n                console.log("ImJoy RPC loaded successfully!");\n              });\n            } else {\n              throw new Error("Failed to verify the credentail:" + (result && result.error));\n            }\n          });\n        } else {\n          setupRPC(cfg).then(() => {\n            console.log("ImJoy RPC loaded successfully!");\n          });\n        }\n      } else {\n        throw new Error(`unrecognized message: ${e.data}`);\n      }\n    }\n  };\n\n  window.addEventListener("message", handleEvent);\n  parent.postMessage({\n    type: "imjoyRPCReady",\n    config: config,\n    peer_id: peer_id\n  }, "*");\n}\nfunction setupRPC(config) {\n  config = config || {};\n  if (!config.name) throw new Error("Please specify a name for your app.");\n  config.version = config.version || "0.1.0";\n  config.description = config.description || `[TODO: add description for ${config.name} ]`;\n  config.type = config.type || "rpc-window";\n  config.id = config.id || Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["randId"])();\n  config.allow_execution = config.allow_execution || false;\n\n  if (config.enable_service_worker) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["setupServiceWorker"])(config.base_url, config.target_origin, config.cache_requirements);\n  }\n\n  if (config.cache_requirements) {\n    delete config.cache_requirements;\n  } // remove functions\n\n\n  config = Object.keys(config).reduce((p, c) => {\n    if (typeof config[c] !== "function") p[c] = config[c];\n    return p;\n  }, {});\n  return new Promise((resolve, reject) => {\n    if (_inIframe()) {\n      if (config.type === "web-worker") {\n        try {\n          setupWebWorker(config);\n        } catch (e) {\n          // fallback to iframe\n          Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__["default"])(config);\n        }\n      } else if (config.type === "web-python" || config.type === "web-python-window") {\n        Object(_pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config);\n      } else if (["rpc-window", "rpc-worker", "iframe", "window"].includes(config.type)) {\n        Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__["default"])(config);\n      } else {\n        console.error("Unsupported plugin type: " + config.type);\n        reject("Unsupported plugin type: " + config.type);\n      }\n\n      try {\n        const handleEvent = e => {\n          const api = e.detail;\n\n          if (config.expose_api_globally) {\n            window.api = api;\n          } // imjoy plugin api\n\n\n          resolve(api);\n          window.removeEventListener("imjoy_remote_api_ready", handleEvent);\n        };\n\n        window.addEventListener("imjoy_remote_api_ready", handleEvent);\n      } catch (e) {\n        reject(e);\n      }\n    } else {\n      reject(new Error("imjoy-rpc should only run inside an iframe."));\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.js\n')},"./src/plugin.webworker.js":function(module,exports,__webpack_require__){eval('module.exports = function() {\n  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ "./node_modules/worker-loader/dist/workers/InlineWorker.js")("/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, \'__esModule\', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === \'object\' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, \'default\', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != \'string\') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module[\'default\']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, \'a\', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\"\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\"./src/plugin.webworker.js\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\"./src/plugin.webworker.js\\":\\n/*!*********************************!*\\\\\\n  !*** ./src/plugin.webworker.js ***!\\n  \\\\*********************************/\\n/*! no exports provided */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\"use strict\\";\\neval(\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \\\\\\"./src/pluginCore.js\\\\\\");\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \\\\\\"./src/rpc.js\\\\\\");\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \\\\\\"./src/utils.js\\\\\\");\\\\n/**\\\\n * Contains the routines loaded by the plugin Worker under web-browser.\\\\n *\\\\n * Initializes the web environment version of the platform-dependent\\\\n * connection object for the plugin site\\\\n */\\\\n\\\\n\\\\n\\\\n\\\\n(function() {\\\\n  // make sure this runs inside a webworker\\\\n  if (\\\\n    typeof WorkerGlobalScope === \\\\\\"undefined\\\\\\" ||\\\\n    !self ||\\\\n    !(self instanceof WorkerGlobalScope)\\\\n  ) {\\\\n    throw new Error(\\\\\\"This script can only loaded in a webworker\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Connection object provided to the RPC constructor,\\\\n   * plugin site implementation for the web-based environment.\\\\n   * Global will be then cleared to prevent exposure into the\\\\n   * Worker, so we put this local connection object into a closure\\\\n   */\\\\n  class Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\"MessageEmitter\\\\\\"] {\\\\n    constructor(config) {\\\\n      super(config && config.debug);\\\\n      this.config = config || {};\\\\n    }\\\\n    connect() {\\\\n      self.addEventListener(\\\\\\"message\\\\\\", e => {\\\\n        this._fire(e.data.type, e.data);\\\\n      });\\\\n      this.emit({\\\\n        type: \\\\\\"initialized\\\\\\",\\\\n        config: this.config\\\\n      });\\\\n    }\\\\n    disconnect() {\\\\n      this._fire(\\\\\\"beforeDisconnect\\\\\\");\\\\n      self.close();\\\\n      this._fire(\\\\\\"disconnected\\\\\\");\\\\n    }\\\\n    emit(data) {\\\\n      let transferables = undefined;\\\\n      if (data.__transferables__) {\\\\n        transferables = data.__transferables__;\\\\n        delete data.__transferables__;\\\\n      }\\\\n      self.postMessage(data, transferables);\\\\n    }\\\\n    async execute(code) {\\\\n      if (code.type === \\\\\\"requirements\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\"string\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (!Array.isArray(code.requirements)) {\\\\n                code.requirements = [code.requirements];\\\\n              }\\\\n              for (var i = 0; i < code.requirements.length; i++) {\\\\n                if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\".css\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\"css:\\\\\\")\\\\n                ) {\\\\n                  throw \\\\\\"unable to import css in a webworker\\\\\\";\\\\n                } else if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\".js\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\"js:\\\\\\")\\\\n                ) {\\\\n                  if (code.requirements[i].startsWith(\\\\\\"js:\\\\\\")) {\\\\n                    code.requirements[i] = code.requirements[i].slice(3);\\\\n                  }\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\"http\\\\\\")) {\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\"cache:\\\\\\")) {\\\\n                  //ignore cache\\\\n                } else {\\\\n                  console.log(\\\\n                    \\\\\\"Unprocessed requirements url: \\\\\\" + code.requirements[i]\\\\n                  );\\\\n                }\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\"failed to import required scripts: \\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n        } catch (e) {\\\\n          throw e;\\\\n        }\\\\n      } else if (code.type === \\\\\\"script\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\"string\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (Array.isArray(code.requirements)) {\\\\n                for (let i = 0; i < code.requirements.length; i++) {\\\\n                  importScripts(code.requirements[i]);\\\\n                }\\\\n              } else {\\\\n                importScripts(code.requirements);\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\"failed to import required scripts: \\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n          eval(code.content);\\\\n        } catch (e) {\\\\n          console.error(e.message, e.stack);\\\\n          throw e;\\\\n        }\\\\n      } else {\\\\n        throw \\\\\\"unsupported code type.\\\\\\";\\\\n      }\\\\n      if (code.type === \\\\\\"requirements\\\\\\") {\\\\n        self.postMessage({\\\\n          type: \\\\\\"cacheRequirements\\\\\\",\\\\n          requirements: code.requirements\\\\n        });\\\\n      }\\\\n    }\\\\n  }\\\\n  const config = {\\\\n    type: \\\\\\"web-worker\\\\\\",\\\\n    dedicated_thread: true,\\\\n    allow_execution: true,\\\\n    lang: \\\\\\"javascript\\\\\\",\\\\n    api_version: _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\"API_VERSION\\\\\\"]\\\\n  };\\\\n  const conn = new Connection(config);\\\\n  conn.on(\\\\\\"connectRPC\\\\\\", data => {\\\\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"connectRPC\\\\\\"])(conn, Object.assign(data.config, config));\\\\n  });\\\\n  conn.connect();\\\\n  self.postMessage({\\\\n    type: \\\\\\"worker-ready\\\\\\"\\\\n  });\\\\n})();\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luLndlYndvcmtlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbi53ZWJ3b3JrZXIuanM/OGM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnRhaW5zIHRoZSByb3V0aW5lcyBsb2FkZWQgYnkgdGhlIHBsdWdpbiBXb3JrZXIgdW5kZXIgd2ViLWJyb3dzZXIuXG4gKlxuICogSW5pdGlhbGl6ZXMgdGhlIHdlYiBlbnZpcm9ubWVudCB2ZXJzaW9uIG9mIHRoZSBwbGF0Zm9ybS1kZXBlbmRlbnRcbiAqIGNvbm5lY3Rpb24gb2JqZWN0IGZvciB0aGUgcGx1Z2luIHNpdGVcbiAqL1xuaW1wb3J0IHsgY29ubmVjdFJQQyB9IGZyb20gXCIuL3BsdWdpbkNvcmUuanNcIjtcbmltcG9ydCB7IEFQSV9WRVJTSU9OIH0gZnJvbSBcIi4vcnBjLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlRW1pdHRlciwgcmFuZElkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuKGZ1bmN0aW9uKCkge1xuICAvLyBtYWtlIHN1cmUgdGhpcyBydW5zIGluc2lkZSBhIHdlYndvcmtlclxuICBpZiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgIXNlbGYgfHxcbiAgICAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBzY3JpcHQgY2FuIG9ubHkgbG9hZGVkIGluIGEgd2Vid29ya2VyXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25uZWN0aW9uIG9iamVjdCBwcm92aWRlZCB0byB0aGUgUlBDIGNvbnN0cnVjdG9yLFxuICAgKiBwbHVnaW4gc2l0ZSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHdlYi1iYXNlZCBlbnZpcm9ubWVudC5cbiAgICogR2xvYmFsIHdpbGwgYmUgdGhlbiBjbGVhcmVkIHRvIHByZXZlbnQgZXhwb3N1cmUgaW50byB0aGVcbiAgICogV29ya2VyLCBzbyB3ZSBwdXQgdGhpcyBsb2NhbCBjb25uZWN0aW9uIG9iamVjdCBpbnRvIGEgY2xvc3VyZVxuICAgKi9cbiAgY2xhc3MgQ29ubmVjdGlvbiBleHRlbmRzIE1lc3NhZ2VFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgIHN1cGVyKGNvbmZpZyAmJiBjb25maWcuZGVidWcpO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGUgPT4ge1xuICAgICAgICB0aGlzLl9maXJlKGUuZGF0YS50eXBlLCBlLmRhdGEpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoe1xuICAgICAgICB0eXBlOiBcImluaXRpYWxpemVkXCIsXG4gICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgdGhpcy5fZmlyZShcImJlZm9yZURpc2Nvbm5lY3RcIik7XG4gICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICB0aGlzLl9maXJlKFwiZGlzY29ubmVjdGVkXCIpO1xuICAgIH1cbiAgICBlbWl0KGRhdGEpIHtcbiAgICAgIGxldCB0cmFuc2ZlcmFibGVzID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGRhdGEuX190cmFuc2ZlcmFibGVzX18pIHtcbiAgICAgICAgdHJhbnNmZXJhYmxlcyA9IGRhdGEuX190cmFuc2ZlcmFibGVzX187XG4gICAgICAgIGRlbGV0ZSBkYXRhLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgICAgfVxuICAgICAgc2VsZi5wb3N0TWVzc2FnZShkYXRhLCB0cmFuc2ZlcmFibGVzKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShjb2RlKSB7XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgPSBbY29kZS5yZXF1aXJlbWVudHNdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZS5yZXF1aXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmNzc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNzczpcIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IFwidW5hYmxlIHRvIGltcG9ydCBjc3MgaW4gYSB3ZWJ3b3JrZXJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcIi5qc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImpzOlwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNvZGUucmVxdWlyZW1lbnRzW2ldLnN0YXJ0c1dpdGgoXCJqczpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0gPSBjb2RlLnJlcXVpcmVtZW50c1tpXS5zbGljZSgzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNhY2hlOlwiKSkge1xuICAgICAgICAgICAgICAgICAgLy9pZ25vcmUgY2FjaGVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIFwiVW5wcm9jZXNzZWQgcmVxdWlyZW1lbnRzIHVybDogXCIgKyBjb2RlLnJlcXVpcmVtZW50c1tpXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2RlLnJlcXVpcmVtZW50cykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvZGUucmVxdWlyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpbXBvcnRTY3JpcHRzKGNvZGUucmVxdWlyZW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBldmFsKGNvZGUuY29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSwgZS5zdGFjayk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJ1bnN1cHBvcnRlZCBjb2RlIHR5cGUuXCI7XG4gICAgICB9XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwiY2FjaGVSZXF1aXJlbWVudHNcIixcbiAgICAgICAgICByZXF1aXJlbWVudHM6IGNvZGUucmVxdWlyZW1lbnRzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBjb25maWcgPSB7XG4gICAgdHlwZTogXCJ3ZWItd29ya2VyXCIsXG4gICAgZGVkaWNhdGVkX3RocmVhZDogdHJ1ZSxcbiAgICBhbGxvd19leGVjdXRpb246IHRydWUsXG4gICAgbGFuZzogXCJqYXZhc2NyaXB0XCIsXG4gICAgYXBpX3ZlcnNpb246IEFQSV9WRVJTSU9OXG4gIH07XG4gIGNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbihjb25maWcpO1xuICBjb25uLm9uKFwiY29ubmVjdFJQQ1wiLCBkYXRhID0+IHtcbiAgICBjb25uZWN0UlBDKGNvbm4sIE9iamVjdC5hc3NpZ24oZGF0YS5jb25maWcsIGNvbmZpZykpO1xuICB9KTtcbiAgY29ubi5jb25uZWN0KCk7XG4gIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgIHR5cGU6IFwid29ya2VyLXJlYWR5XCJcbiAgfSk7XG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\\\\n\\");\\n\\n/***/ }),\\n\\n/***/ \\"./src/pluginCore.js\\":\\n/*!***************************!*\\\\\\n  !*** ./src/pluginCore.js ***!\\n  \\\\***************************/\\n/*! exports provided: connectRPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\"use strict\\";\\neval(\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"connectRPC\\\\\\", function() { return connectRPC; });\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \\\\\\"./src/rpc.js\\\\\\");\\\\n/**\\\\n * Core plugin script loaded into the plugin process/thread.\\\\n *\\\\n * Initializes the plugin-site API global methods.\\\\n */\\\\n\\\\nfunction connectRPC(connection, config) {\\\\n  config = config || {};\\\\n  const codecs = {};\\\\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"RPC\\\\\\"](connection, config, codecs);\\\\n  rpc.on(\\\\\\"getInterface\\\\\\", function () {\\\\n    launchConnected();\\\\n  });\\\\n  rpc.on(\\\\\\"remoteReady\\\\\\", function () {\\\\n    const api = rpc.getRemote() || {};\\\\n\\\\n    if (api.export) {\\\\n      throw new Error(\\\\\\"`export` is a reserved function name\\\\\\");\\\\n    }\\\\n\\\\n    if (api.onload) {\\\\n      throw new Error(\\\\\\"`onload` is a reserved function name\\\\\\");\\\\n    }\\\\n\\\\n    if (api.dispose) {\\\\n      throw new Error(\\\\\\"`dispose` is a reserved function name\\\\\\");\\\\n    }\\\\n\\\\n    api.registerCodec = function (config) {\\\\n      if (!config[\\\\\\"name\\\\\\"] || !config[\\\\\\"encoder\\\\\\"] && !config[\\\\\\"decoder\\\\\\"]) {\\\\n        throw new Error(\\\\\\"Invalid codec format, please make sure you provide a name, type, encoder and decoder.\\\\\\");\\\\n      } else {\\\\n        if (config.type) {\\\\n          for (let k of Object.keys(codecs)) {\\\\n            if (codecs[k].type === config.type || k === config.name) {\\\\n              delete codecs[k];\\\\n              console.warn(\\\\\\"Remove duplicated codec: \\\\\\" + k);\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        codecs[config[\\\\\\"name\\\\\\"]] = config;\\\\n      }\\\\n    };\\\\n\\\\n    api.disposeObject = function (obj) {\\\\n      rpc.disposeObject(obj);\\\\n    };\\\\n\\\\n    api.export = function (_interface, config) {\\\\n      rpc.setInterface(_interface, config);\\\\n    };\\\\n\\\\n    api.onLoad = function (handler) {\\\\n      handler = checkHandler(handler);\\\\n\\\\n      if (connected) {\\\\n        handler();\\\\n      } else {\\\\n        connectedHandlers.push(handler);\\\\n      }\\\\n    };\\\\n\\\\n    api.dispose = function (_interface) {\\\\n      rpc.disconnect();\\\\n    };\\\\n\\\\n    if (typeof WorkerGlobalScope !== \\\\\\"undefined\\\\\\" && self instanceof WorkerGlobalScope) {\\\\n      self.api = api;\\\\n      self.postMessage({\\\\n        type: \\\\\\"imjoy_remote_api_ready\\\\\\"\\\\n      });\\\\n    } else if (typeof window) {\\\\n      window.dispatchEvent(new CustomEvent(\\\\\\"imjoy_remote_api_ready\\\\\\", {\\\\n        detail: api\\\\n      }));\\\\n    }\\\\n  });\\\\n  let connected = false;\\\\n  const connectedHandlers = [];\\\\n\\\\n  const launchConnected = function () {\\\\n    if (!connected) {\\\\n      connected = true;\\\\n      let handler;\\\\n\\\\n      while (handler = connectedHandlers.pop()) {\\\\n        handler();\\\\n      }\\\\n    }\\\\n  };\\\\n\\\\n  const checkHandler = function (handler) {\\\\n    const type = typeof handler;\\\\n\\\\n    if (type !== \\\\\\"function\\\\\\") {\\\\n      const msg = \\\\\\"A function may only be subsribed to the event, \\\\\\" + type + \\\\\\" was provided instead\\\\\\";\\\\n      throw new Error(msg);\\\\n    }\\\\n\\\\n    return handler;\\\\n  };\\\\n\\\\n  return rpc;\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbkNvcmUuanM/YTgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcmUgcGx1Z2luIHNjcmlwdCBsb2FkZWQgaW50byB0aGUgcGx1Z2luIHByb2Nlc3MvdGhyZWFkLlxuICpcbiAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4tc2l0ZSBBUEkgZ2xvYmFsIG1ldGhvZHMuXG4gKi9cbmltcG9ydCB7IFJQQyB9IGZyb20gXCIuL3JwYy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFJQQyhjb25uZWN0aW9uLCBjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25zdCBjb2RlY3MgPSB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKTtcbiAgcnBjLm9uKFwiZ2V0SW50ZXJmYWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGxhdW5jaENvbm5lY3RlZCgpO1xuICB9KTtcblxuICBycGMub24oXCJyZW1vdGVSZWFkeVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcGkgPSBycGMuZ2V0UmVtb3RlKCkgfHwge307XG4gICAgaWYgKGFwaS5leHBvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBleHBvcnRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBvbmxvYWRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5kaXNwb3NlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGlzcG9zZWAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXCIpO1xuICAgIH1cbiAgICBhcGkucmVnaXN0ZXJDb2RlYyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgaWYgKCFjb25maWdbXCJuYW1lXCJdIHx8ICghY29uZmlnW1wiZW5jb2RlclwiXSAmJiAhY29uZmlnW1wiZGVjb2RlclwiXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSW52YWxpZCBjb2RlYyBmb3JtYXQsIHBsZWFzZSBtYWtlIHN1cmUgeW91IHByb3ZpZGUgYSBuYW1lLCB0eXBlLCBlbmNvZGVyIGFuZCBkZWNvZGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGNvZGVjcykpIHtcbiAgICAgICAgICAgIGlmIChjb2RlY3Nba10udHlwZSA9PT0gY29uZmlnLnR5cGUgfHwgayA9PT0gY29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGNvZGVjc1trXTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVtb3ZlIGR1cGxpY2F0ZWQgY29kZWM6IFwiICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvZGVjc1tjb25maWdbXCJuYW1lXCJdXSA9IGNvbmZpZztcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICBycGMuZGlzcG9zZU9iamVjdChvYmopO1xuICAgIH07XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UsIGNvbmZpZykge1xuICAgICAgcnBjLnNldEludGVyZmFjZShfaW50ZXJmYWNlLCBjb25maWcpO1xuICAgIH07XG4gICAgYXBpLm9uTG9hZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIgPSBjaGVja0hhbmRsZXIoaGFuZGxlcik7XG4gICAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3RlZEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGkuZGlzcG9zZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xuICBjb25zdCBjb25uZWN0ZWRIYW5kbGVycyA9IFtdO1xuXG4gIGNvbnN0IGxhdW5jaENvbm5lY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBjb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBsZXQgaGFuZGxlcjtcbiAgICAgIHdoaWxlICgoaGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXJzLnBvcCgpKSkge1xuICAgICAgICBoYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgbXNnID1cbiAgICAgICAgXCJBIGZ1bmN0aW9uIG1heSBvbmx5IGJlIHN1YnNyaWJlZCB0byB0aGUgZXZlbnQsIFwiICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgIFwiIHdhcyBwcm92aWRlZCBpbnN0ZWFkXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH07XG5cbiAgcmV0dXJuIHJwYztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./src/pluginCore.js\\\\n\\");\\n\\n/***/ }),\\n\\n/***/ \\"./src/rpc.js\\":\\n/*!********************!*\\\\\\n  !*** ./src/rpc.js ***!\\n  \\\\********************/\\n/*! exports provided: API_VERSION, RPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\"use strict\\";\\neval(\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"API_VERSION\\\\\\", function() { return API_VERSION; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"RPC\\\\\\", function() { return RPC; });\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \\\\\\"./src/utils.js\\\\\\");\\\\n/**\\\\n * Contains the RPC object used both by the application\\\\n * site, and by each plugin\\\\n */\\\\n\\\\nconst API_VERSION = \\\\\\"0.2.3\\\\\\";\\\\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\\\\n\\\\nfunction _appendBuffer(buffer1, buffer2) {\\\\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\\\\n  tmp.set(new Uint8Array(buffer1), 0);\\\\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\\\\n  return tmp.buffer;\\\\n}\\\\n\\\\nfunction indexObject(obj, is) {\\\\n  if (!is) throw new Error(\\\\\\"undefined index\\\\\\");\\\\n  if (typeof is === \\\\\\"string\\\\\\") return indexObject(obj, is.split(\\\\\\".\\\\\\"));else if (is.length === 0) return obj;else return indexObject(obj[is[0]], is.slice(1));\\\\n}\\\\n/**\\\\n * RPC object represents a single site in the\\\\n * communication protocol between the application and the plugin\\\\n *\\\\n * @param {Object} connection a special object allowing to send\\\\n * and receive messages from the opposite site (basically it\\\\n * should only provide send() and onMessage() methods)\\\\n */\\\\n\\\\n\\\\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"MessageEmitter\\\\\\"] {\\\\n  constructor(connection, config, codecs) {\\\\n    super(config && config.debug);\\\\n    this._connection = connection;\\\\n    this.config = config || {};\\\\n    this._codecs = codecs || {};\\\\n    this._object_store = {};\\\\n    this._method_weakmap = new WeakMap();\\\\n    this._object_weakmap = new WeakMap();\\\\n    this._local_api = null; // make sure there is an execute function\\\\n\\\\n    const name = this.config.name;\\\\n\\\\n    this._connection.execute = this._connection.execute || function () {\\\\n      throw new Error(`connection.execute not implemented (in \\\\\\"${name}\\\\\\")`);\\\\n    };\\\\n\\\\n    this._store = new ReferenceStore();\\\\n    this._method_refs = new ReferenceStore();\\\\n\\\\n    this._method_refs.onReady(() => {\\\\n      this._fire(\\\\\\"remoteIdle\\\\\\");\\\\n    });\\\\n\\\\n    this._method_refs.onBusy(() => {\\\\n      this._fire(\\\\\\"remoteBusy\\\\\\");\\\\n    });\\\\n\\\\n    this._setupMessageHanlders();\\\\n  }\\\\n\\\\n  init() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\"initialized\\\\\\",\\\\n      config: this.config,\\\\n      peer_id: this._connection.peer_id\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when received a responce from the\\\\n   * remote site reporting that the previously provided interface\\\\n   * has been successfully set as remote for that site\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  getRemoteCallStack() {\\\\n    return this._method_refs.getStack();\\\\n  }\\\\n  /**\\\\n   * @returns {Object} set of remote interface methods\\\\n   */\\\\n\\\\n\\\\n  getRemote() {\\\\n    return this._remote_interface;\\\\n  }\\\\n  /**\\\\n   * Sets the interface of this site making it available to the\\\\n   * remote site by sending a message with a set of methods names\\\\n   *\\\\n   * @param {Object} _interface to set\\\\n   */\\\\n\\\\n\\\\n  setInterface(_interface, config) {\\\\n    config = config || {};\\\\n    this.config.name = config.name || this.config.name;\\\\n    this.config.description = config.description || this.config.description;\\\\n\\\\n    if (this.config.forwarding_functions) {\\\\n      for (let func_name of this.config.forwarding_functions) {\\\\n        const _remote = this._remote_interface;\\\\n\\\\n        if (_remote[func_name]) {\\\\n          if (_interface.constructor === Object) {\\\\n            if (!_interface[func_name]) {\\\\n              _interface[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          } else if (_interface.constructor.constructor === Function) {\\\\n            if (!_interface.constructor.prototype[func_name]) {\\\\n              _interface.constructor.prototype[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          }\\\\n        }\\\\n      }\\\\n    }\\\\n\\\\n    this._local_api = _interface;\\\\n\\\\n    this._fire(\\\\\\"interfaceAvailable\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Sends the actual interface to the remote site upon it was\\\\n   * updated or by a special request of the remote site\\\\n   */\\\\n\\\\n\\\\n  sendInterface() {\\\\n    if (!this._local_api) {\\\\n      throw new Error(\\\\\\"interface is not set.\\\\\\");\\\\n    }\\\\n\\\\n    this._encode(this._local_api, true).then(api => {\\\\n      this._connection.emit({\\\\n        type: \\\\\\"setInterface\\\\\\",\\\\n        api: api\\\\n      });\\\\n    });\\\\n  }\\\\n\\\\n  _disposeObject(objectId) {\\\\n    if (this._object_store[objectId]) {\\\\n      delete this._object_store[objectId];\\\\n    } else {\\\\n      throw new Error(`Object (id=${objectId}) not found.`);\\\\n    }\\\\n  }\\\\n\\\\n  disposeObject(obj) {\\\\n    return new Promise((resolve, reject) => {\\\\n      if (this._object_weakmap.has(obj)) {\\\\n        const objectId = this._object_weakmap.get(obj);\\\\n\\\\n        this._connection.once(\\\\\\"disposed\\\\\\", data => {\\\\n          if (data.error) reject(new Error(data.error));else resolve();\\\\n        });\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\"disposeObject\\\\\\",\\\\n          object_id: objectId\\\\n        });\\\\n      } else {\\\\n        throw new Error(\\\\\\"Invalid object\\\\\\");\\\\n      }\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Handles a message from the remote site\\\\n   */\\\\n\\\\n\\\\n  _setupMessageHanlders() {\\\\n    this._connection.on(\\\\\\"init\\\\\\", this.init);\\\\n\\\\n    this._connection.on(\\\\\\"execute\\\\\\", data => {\\\\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\\\\n        this._connection.emit({\\\\n          type: \\\\\\"executed\\\\\\"\\\\n        });\\\\n      }).catch(e => {\\\\n        console.error(e);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\"executed\\\\\\",\\\\n          error: String(e)\\\\n        });\\\\n      });\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\"method\\\\\\", async data => {\\\\n      let resolve, reject, method, method_this, args, result;\\\\n\\\\n      try {\\\\n        if (data.promise) {\\\\n          [resolve, reject] = await this._unwrap(data.promise, false);\\\\n        }\\\\n\\\\n        const _interface = this._object_store[data.object_id];\\\\n        method = indexObject(_interface, data.name);\\\\n\\\\n        if (data.name.includes(\\\\\\".\\\\\\")) {\\\\n          const tmp = data.name.split(\\\\\\".\\\\\\");\\\\n          const intf_index = tmp.slice(0, tmp.length - 1).join(\\\\\\".\\\\\\");\\\\n          method_this = indexObject(_interface, intf_index);\\\\n        } else {\\\\n          method_this = _interface;\\\\n        }\\\\n\\\\n        args = await this._unwrap(data.args, true);\\\\n\\\\n        if (data.promise) {\\\\n          result = method.apply(method_this, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\"AsyncFunction\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } else {\\\\n          method.apply(method_this, args);\\\\n        }\\\\n      } catch (err) {\\\\n        console.error(this.config.name, err);\\\\n\\\\n        if (reject) {\\\\n          reject(err);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\"callback\\\\\\", async data => {\\\\n      let resolve, reject, method, args, result;\\\\n\\\\n      try {\\\\n        if (data.promise) {\\\\n          [resolve, reject] = await this._unwrap(data.promise, false);\\\\n        }\\\\n\\\\n        if (data.promise) {\\\\n          method = this._store.fetch(data.id);\\\\n          args = await this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\");\\\\n          }\\\\n\\\\n          result = method.apply(null, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\"AsyncFunction\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } else {\\\\n          method = this._store.fetch(data.id);\\\\n          args = await this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\");\\\\n          }\\\\n\\\\n          method.apply(null, args);\\\\n        }\\\\n      } catch (err) {\\\\n        console.error(this.config.name, err);\\\\n\\\\n        if (reject) {\\\\n          reject(err);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\"disposeObject\\\\\\", data => {\\\\n      try {\\\\n        this._disposeObject(data.object_id);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\"disposed\\\\\\"\\\\n        });\\\\n      } catch (e) {\\\\n        console.error(e);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\"disposed\\\\\\",\\\\n          error: String(e)\\\\n        });\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\"setInterface\\\\\\", data => {\\\\n      this._setRemoteInterface(data.api);\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\"getInterface\\\\\\", () => {\\\\n      this._fire(\\\\\\"getInterface\\\\\\");\\\\n\\\\n      if (this._local_api) {\\\\n        this.sendInterface();\\\\n      } else {\\\\n        this.once(\\\\\\"interfaceAvailable\\\\\\", () => {\\\\n          this.sendInterface();\\\\n        });\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\"interfaceSetAsRemote\\\\\\", () => {\\\\n      this._fire(\\\\\\"interfaceSetAsRemote\\\\\\");\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\"disconnect\\\\\\", () => {\\\\n      this._fire(\\\\\\"beforeDisconnect\\\\\\");\\\\n\\\\n      this._connection.disconnect();\\\\n\\\\n      this._fire(\\\\\\"disconnected\\\\\\");\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Sends a requests to the remote site asking it to provide its\\\\n   * current interface\\\\n   */\\\\n\\\\n\\\\n  requestRemote() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\"getInterface\\\\\\"\\\\n    });\\\\n  }\\\\n\\\\n  _ndarray(typedArray, shape, dtype) {\\\\n    const _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"typedArrayToDtype\\\\\\"][typedArray.constructor.name];\\\\n\\\\n    if (dtype && dtype !== _dtype) {\\\\n      throw \\\\\\"dtype doesn\'t match the type of the array: \\\\\\" + _dtype + \\\\\\" != \\\\\\" + dtype;\\\\n    }\\\\n\\\\n    shape = shape || [typedArray.length];\\\\n    return {\\\\n      _rtype: \\\\\\"ndarray\\\\\\",\\\\n      _rvalue: typedArray.buffer,\\\\n      _rshape: shape,\\\\n      _rdtype: _dtype\\\\n    };\\\\n  }\\\\n  /**\\\\n   * Sets the new remote interface provided by the other site\\\\n   *\\\\n   * @param {Array} names list of function names\\\\n   */\\\\n\\\\n\\\\n  _setRemoteInterface(api) {\\\\n    this._decode(api).then(intf => {\\\\n      this._remote_interface = intf;\\\\n\\\\n      this._fire(\\\\\\"remoteReady\\\\\\");\\\\n\\\\n      this._reportRemoteSet();\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * method. When the generated function is called, it will send the\\\\n   * corresponding message to the remote site asking it to execute\\\\n   * the particular method of its interface\\\\n   *\\\\n   * @param {String} name of the remote method\\\\n   *\\\\n   * @returns {Function} wrapped remote method\\\\n   */\\\\n\\\\n\\\\n  _genRemoteMethod(targetId, name, objectId) {\\\\n    const me = this;\\\\n\\\\n    const remoteMethod = function () {\\\\n      return new Promise(async (resolve, reject) => {\\\\n        let id = null;\\\\n\\\\n        try {\\\\n          id = me._method_refs.put(objectId ? objectId + \\\\\\"/\\\\\\" + name : name);\\\\n\\\\n          const wrapped_resolve = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return resolve.apply(this, arguments);\\\\n          };\\\\n\\\\n          const wrapped_reject = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return reject.apply(this, arguments);\\\\n          };\\\\n\\\\n          const encodedPromise = await me._wrap([wrapped_resolve, wrapped_reject]); // store the key id for removing them from the reference store together\\\\n\\\\n          wrapped_resolve.__promise_pair = encodedPromise[1]._rvalue;\\\\n          wrapped_reject.__promise_pair = encodedPromise[0]._rvalue;\\\\n          let args = Array.prototype.slice.call(arguments);\\\\n\\\\n          if (name === \\\\\\"register\\\\\\" || name === \\\\\\"export\\\\\\" || name === \\\\\\"on\\\\\\") {\\\\n            args = await me._wrap(args, true);\\\\n          } else {\\\\n            args = await me._wrap(args);\\\\n          }\\\\n\\\\n          const transferables = args.__transferables__;\\\\n          if (transferables) delete args.__transferables__;\\\\n\\\\n          me._connection.emit({\\\\n            type: \\\\\\"method\\\\\\",\\\\n            target_id: targetId,\\\\n            name: name,\\\\n            object_id: objectId,\\\\n            args: args,\\\\n            promise: encodedPromise\\\\n          }, transferables);\\\\n        } catch (e) {\\\\n          if (id) me._method_refs.fetch(id);\\\\n          reject(`Failed to exectue remote method (interface: ${objectId || me.id}, method: ${name}), error: ${e}`);\\\\n        }\\\\n      });\\\\n    };\\\\n\\\\n    remoteMethod.__remote_method = true;\\\\n    return remoteMethod;\\\\n  }\\\\n  /**\\\\n   * Sends a responce reporting that interface just provided by the\\\\n   * remote site was successfully set by this site as remote\\\\n   */\\\\n\\\\n\\\\n  _reportRemoteSet() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\"interfaceSetAsRemote\\\\\\"\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Prepares the provided set of remote method arguments for\\\\n   * sending to the remote site, replaces all the callbacks with\\\\n   * identifiers\\\\n   *\\\\n   * @param {Array} args to wrap\\\\n   *\\\\n   * @returns {Array} wrapped arguments\\\\n   */\\\\n\\\\n\\\\n  async _encode(aObject, asInterface, objectId) {\\\\n    const aType = typeof aObject;\\\\n\\\\n    if (aType === \\\\\\"number\\\\\\" || aType === \\\\\\"string\\\\\\" || aType === \\\\\\"boolean\\\\\\" || aObject === null || aObject === undefined || aObject instanceof ArrayBuffer) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    let bObject;\\\\n\\\\n    if (typeof aObject === \\\\\\"function\\\\\\") {\\\\n      if (asInterface) {\\\\n        if (!objectId) throw new Error(\\\\\\"objectId is not specified.\\\\\\");\\\\n        bObject = {\\\\n          _rtype: \\\\\\"interface\\\\\\",\\\\n          _rtarget_id: this._connection.peer_id,\\\\n          _rintf: objectId,\\\\n          _rvalue: asInterface\\\\n        };\\\\n\\\\n        this._method_weakmap.set(aObject, bObject);\\\\n      } else if (this._method_weakmap.has(aObject)) {\\\\n        bObject = this._method_weakmap.get(aObject);\\\\n      } else {\\\\n        const cid = this._store.put(aObject);\\\\n\\\\n        bObject = {\\\\n          _rtype: \\\\\\"callback\\\\\\",\\\\n          _rtarget_id: this._connection.peer_id,\\\\n          _rname: aObject.constructor && aObject.constructor.name || cid,\\\\n          _rvalue: cid\\\\n        };\\\\n      }\\\\n\\\\n      return bObject;\\\\n    } // skip if already encoded\\\\n\\\\n\\\\n    if (aObject.constructor instanceof Object && aObject._rtype) {\\\\n      // make sure the interface functions are encoded\\\\n      if (aObject._rintf) {\\\\n        const temp = aObject._rtype;\\\\n        delete aObject._rtype;\\\\n        bObject = await this._encode(aObject, asInterface, objectId);\\\\n        bObject._rtype = temp;\\\\n      } else {\\\\n        bObject = aObject;\\\\n      }\\\\n\\\\n      return bObject;\\\\n    }\\\\n\\\\n    const transferables = [];\\\\n    const _transfer = aObject._transfer;\\\\n    const isarray = Array.isArray(aObject);\\\\n\\\\n    for (let tp of Object.keys(this._codecs)) {\\\\n      const codec = this._codecs[tp];\\\\n\\\\n      if (codec.encoder && aObject instanceof codec.type) {\\\\n        // TODO: what if multiple encoders found\\\\n        let encodedObj = await Promise.resolve(codec.encoder(aObject));\\\\n        if (encodedObj && !encodedObj._rtype) encodedObj._rtype = codec.name; // encode the functions in the interface object\\\\n\\\\n        if (encodedObj && encodedObj._rintf) {\\\\n          const temp = encodedObj._rtype;\\\\n          delete encodedObj._rtype;\\\\n          encodedObj = await this._encode(encodedObj, asInterface, objectId);\\\\n          encodedObj._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = encodedObj;\\\\n        return bObject;\\\\n      }\\\\n    }\\\\n\\\\n    if (\\\\n    /*global tf*/\\\\n    typeof tf !== \\\\\\"undefined\\\\\\" && tf.Tensor && aObject instanceof tf.Tensor) {\\\\n      const v_buffer = aObject.dataSync();\\\\n\\\\n      if (aObject._transfer || _transfer) {\\\\n        transferables.push(v_buffer.buffer);\\\\n        delete aObject._transfer;\\\\n      }\\\\n\\\\n      bObject = {\\\\n        _rtype: \\\\\\"ndarray\\\\\\",\\\\n        _rvalue: v_buffer.buffer,\\\\n        _rshape: aObject.shape,\\\\n        _rdtype: aObject.dtype\\\\n      };\\\\n    } else if (\\\\n    /*global nj*/\\\\n    typeof nj !== \\\\\\"undefined\\\\\\" && nj.NdArray && aObject instanceof nj.NdArray) {\\\\n      const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"typedArrayToDtype\\\\\\"][aObject.selection.data.constructor.name];\\\\n\\\\n      if (aObject._transfer || _transfer) {\\\\n        transferables.push(aObject.selection.data.buffer);\\\\n        delete aObject._transfer;\\\\n      }\\\\n\\\\n      bObject = {\\\\n        _rtype: \\\\\\"ndarray\\\\\\",\\\\n        _rvalue: aObject.selection.data.buffer,\\\\n        _rshape: aObject.shape,\\\\n        _rdtype: dtype\\\\n      };\\\\n    } else if (aObject instanceof Error) {\\\\n      console.error(aObject);\\\\n      bObject = {\\\\n        _rtype: \\\\\\"error\\\\\\",\\\\n        _rvalue: aObject.toString()\\\\n      };\\\\n    } else if (typeof File !== \\\\\\"undefined\\\\\\" && aObject instanceof File) {\\\\n      bObject = {\\\\n        _rtype: \\\\\\"file\\\\\\",\\\\n        _rvalue: aObject,\\\\n        _rpath: aObject._path || aObject.webkitRelativePath\\\\n      };\\\\n    } // send objects supported by structure clone algorithm\\\\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\\\\n    else if (aObject !== Object(aObject) || aObject instanceof Boolean || aObject instanceof String || aObject instanceof Date || aObject instanceof RegExp || aObject instanceof ImageData || typeof FileList !== \\\\\\"undefined\\\\\\" && aObject instanceof FileList) {\\\\n        bObject = aObject; // TODO: avoid object such as DynamicPlugin instance.\\\\n      } else if (typeof File !== \\\\\\"undefined\\\\\\" && aObject instanceof File) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\"file\\\\\\",\\\\n          _rname: aObject.name,\\\\n          _rmime: aObject.type,\\\\n          _rvalue: aObject,\\\\n          _rpath: aObject._path || aObject.webkitRelativePath\\\\n        };\\\\n      } else if (aObject instanceof Blob) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\"blob\\\\\\",\\\\n          _rvalue: aObject\\\\n        };\\\\n      } else if (aObject instanceof ArrayBufferView) {\\\\n        if (aObject._transfer || _transfer) {\\\\n          transferables.push(aObject.buffer);\\\\n          delete aObject._transfer;\\\\n        }\\\\n\\\\n        const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"typedArrayToDtype\\\\\\"][aObject.constructor.name];\\\\n        bObject = {\\\\n          _rtype: \\\\\\"typedarray\\\\\\",\\\\n          _rvalue: aObject.buffer,\\\\n          _rdtype: dtype\\\\n        };\\\\n      } else if (aObject instanceof DataView) {\\\\n        if (aObject._transfer || _transfer) {\\\\n          transferables.push(aObject.buffer);\\\\n          delete aObject._transfer;\\\\n        }\\\\n\\\\n        bObject = {\\\\n          _rtype: \\\\\\"memoryview\\\\\\",\\\\n          _rvalue: aObject.buffer\\\\n        };\\\\n      } else if (aObject instanceof Set) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\"set\\\\\\",\\\\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\\\\n        };\\\\n      } else if (aObject instanceof Map) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\"orderedmap\\\\\\",\\\\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\\\\n        };\\\\n      } else if (aObject.constructor instanceof Object || Array.isArray(aObject)) {\\\\n        bObject = isarray ? [] : {};\\\\n        let keys; // an object/array\\\\n\\\\n        if (aObject.constructor === Object || Array.isArray(aObject)) {\\\\n          keys = Object.keys(aObject);\\\\n        } // a class\\\\n        else if (aObject.constructor === Function) {\\\\n            throw new Error(\\\\\\"Please instantiate the class before exportting it.\\\\\\");\\\\n          } // instance of a class\\\\n          else if (aObject.constructor.constructor === Function) {\\\\n              keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject)); // TODO: use a proxy object to represent the actual object\\\\n              // always encode class instance as interface\\\\n\\\\n              asInterface = true;\\\\n            } else {\\\\n              throw Error(\\\\\\"Unsupported interface type\\\\\\");\\\\n            } // encode interfaces\\\\n\\\\n\\\\n        if (aObject._rintf || asInterface) {\\\\n          if (!objectId) {\\\\n            objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"randId\\\\\\"])();\\\\n            this._object_store[objectId] = aObject;\\\\n          }\\\\n\\\\n          for (let k of keys) {\\\\n            if (k === \\\\\\"constructor\\\\\\") continue;\\\\n\\\\n            if (k.startsWith(\\\\\\"_\\\\\\")) {\\\\n              continue;\\\\n            }\\\\n\\\\n            bObject[k] = await this._encode(aObject[k], typeof asInterface === \\\\\\"string\\\\\\" ? asInterface + \\\\\\".\\\\\\" + k : k, objectId);\\\\n          } // object id for dispose the object remotely\\\\n\\\\n\\\\n          bObject._rintf = objectId; // remove interface when closed\\\\n\\\\n          if (aObject.on && typeof aObject.on === \\\\\\"function\\\\\\") {\\\\n            aObject.on(\\\\\\"close\\\\\\", () => {\\\\n              delete this._object_store[objectId];\\\\n            });\\\\n          }\\\\n        } else {\\\\n          for (let k of keys) {\\\\n            if ([\\\\\\"hasOwnProperty\\\\\\", \\\\\\"constructor\\\\\\"].includes(k)) continue;\\\\n            bObject[k] = await this._encode(aObject[k]);\\\\n          }\\\\n        } // for example, browserFS object\\\\n\\\\n      } else if (typeof aObject === \\\\\\"object\\\\\\") {\\\\n        const keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\\\\n        const objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"randId\\\\\\"])();\\\\n\\\\n        for (let k of keys) {\\\\n          if ([\\\\\\"hasOwnProperty\\\\\\", \\\\\\"constructor\\\\\\"].includes(k)) continue; // encode as interface\\\\n\\\\n          bObject[k] = await this._encode(aObject[k], k, bObject);\\\\n        } // object id, used for dispose the object\\\\n\\\\n\\\\n        bObject._rintf = objectId;\\\\n      } else {\\\\n        throw \\\\\\"imjoy-rpc: Unsupported data type:\\\\\\" + aObject;\\\\n      }\\\\n\\\\n    if (transferables.length > 0) {\\\\n      bObject.__transferables__ = transferables;\\\\n    }\\\\n\\\\n    if (!bObject) {\\\\n      throw new Error(\\\\\\"Failed to encode object\\\\\\");\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  async _decode(aObject, withPromise) {\\\\n    if (!aObject) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    let bObject;\\\\n\\\\n    if (aObject[\\\\\\"_rtype\\\\\\"]) {\\\\n      if (this._codecs[aObject._rtype] && this._codecs[aObject._rtype].decoder) {\\\\n        if (aObject._rintf) {\\\\n          const temp = aObject._rtype;\\\\n          delete aObject._rtype;\\\\n          aObject = await this._decode(aObject, withPromise);\\\\n          aObject._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = await Promise.resolve(this._codecs[aObject._rtype].decoder(aObject));\\\\n      } else if (aObject._rtype === \\\\\\"callback\\\\\\") {\\\\n        bObject = this._genRemoteCallback(aObject._rtarget_id, aObject._rvalue, withPromise);\\\\n      } else if (aObject._rtype === \\\\\\"interface\\\\\\") {\\\\n        bObject = this._genRemoteMethod(aObject._rtarget_id, aObject._rvalue, aObject._rintf);\\\\n      } else if (aObject._rtype === \\\\\\"ndarray\\\\\\") {\\\\n        /*global nj tf*/\\\\n        //create build array/tensor if used in the plugin\\\\n        if (typeof nj !== \\\\\\"undefined\\\\\\" && nj.array) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          bObject = nj.array(new Uint8(aObject._rvalue), aObject._rdtype).reshape(aObject._rshape);\\\\n        } else if (typeof tf !== \\\\\\"undefined\\\\\\" && tf.Tensor) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"dtypeToTypedArray\\\\\\"][aObject._rdtype]);\\\\n          bObject = tf.tensor(new arraytype(aObject._rvalue), aObject._rshape, aObject._rdtype);\\\\n        } else {\\\\n          //keep it as regular if transfered to the main app\\\\n          bObject = aObject;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\"error\\\\\\") {\\\\n        bObject = new Error(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\"file\\\\\\") {\\\\n        if (aObject._rvalue instanceof File) {\\\\n          bObject = aObject._rvalue; //patch _path\\\\n\\\\n          bObject._path = aObject._rpath;\\\\n        } else {\\\\n          bObject = new File([aObject._rvalue], aObject._rname, {\\\\n            type: aObject._rmime\\\\n          });\\\\n          bObject._path = aObject._rpath;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\"typedarray\\\\\\") {\\\\n        const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\"dtypeToTypedArray\\\\\\"][aObject._rdtype]);\\\\n        if (!arraytype) throw new Error(\\\\\\"unsupported dtype: \\\\\\" + aObject._rdtype);\\\\n        bObject = new arraytype(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\"memoryview\\\\\\") {\\\\n        bObject = new DataView(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\"blob\\\\\\") {\\\\n        if (aObject._rvalue instanceof Blob) {\\\\n          bObject = aObject._rvalue;\\\\n        } else {\\\\n          bObject = new Blob([aObject._rvalue], {\\\\n            type: aObject._rmime\\\\n          });\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\"orderedmap\\\\\\") {\\\\n        bObject = new Map((await this._decode(aObject._rvalue, withPromise)));\\\\n      } else if (aObject._rtype === \\\\\\"set\\\\\\") {\\\\n        bObject = new Set((await this._decode(aObject._rvalue, withPromise)));\\\\n      } else {\\\\n        // make sure all the interface functions are decoded\\\\n        if (aObject._rintf) {\\\\n          const temp = aObject._rtype;\\\\n          delete aObject._rtype;\\\\n          aObject = await this._decode(aObject, withPromise);\\\\n          aObject._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = aObject;\\\\n      }\\\\n    } else if (aObject.constructor === Object || Array.isArray(aObject)) {\\\\n      const isarray = Array.isArray(aObject);\\\\n      bObject = isarray ? [] : {};\\\\n\\\\n      for (let k of Object.keys(aObject)) {\\\\n        if (isarray || aObject.hasOwnProperty(k)) {\\\\n          const v = aObject[k];\\\\n          bObject[k] = await this._decode(v, withPromise);\\\\n        }\\\\n      }\\\\n    } else {\\\\n      bObject = aObject;\\\\n    }\\\\n\\\\n    if (bObject === undefined) {\\\\n      throw new Error(\\\\\\"Failed to decode object\\\\\\");\\\\n    } // store the object id for dispose\\\\n\\\\n\\\\n    if (aObject._rintf) {\\\\n      this._object_weakmap.set(bObject, aObject._rintf);\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  async _wrap(args, asInterface) {\\\\n    return await this._encode(args, asInterface);\\\\n  }\\\\n  /**\\\\n   * Unwraps the set of arguments delivered from the remote site,\\\\n   * replaces all callback identifiers with a function which will\\\\n   * initiate sending that callback identifier back to other site\\\\n   *\\\\n   * @param {Object} args to unwrap\\\\n   *\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Array} unwrapped args\\\\n   */\\\\n\\\\n\\\\n  async _unwrap(args, withPromise) {\\\\n    return await this._decode(args, withPromise);\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * callback. When the generated function is called, it will send\\\\n   * the corresponding message to the remote site asking it to\\\\n   * execute the particular callback previously saved during a call\\\\n   * by the remote site a method from the interface of this site\\\\n   *\\\\n   * @param {Number} id of the remote callback to execute\\\\n   * @param {Number} argNum argument index of the callback\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Function} wrapped remote callback\\\\n   */\\\\n\\\\n\\\\n  _genRemoteCallback(targetId, cid, withPromise) {\\\\n    const me = this;\\\\n    let remoteCallback;\\\\n\\\\n    if (withPromise) {\\\\n      remoteCallback = function () {\\\\n        return new Promise(async (resolve, reject) => {\\\\n          const args = await me._wrap(Array.prototype.slice.call(arguments));\\\\n          const transferables = args.__transferables__;\\\\n          if (transferables) delete args.__transferables__;\\\\n          const encodedPromise = await me._wrap([resolve, reject]); // store the key id for removing them from the reference store together\\\\n\\\\n          resolve.__promise_pair = encodedPromise[1]._rvalue;\\\\n          reject.__promise_pair = encodedPromise[0]._rvalue;\\\\n\\\\n          try {\\\\n            me._connection.emit({\\\\n              type: \\\\\\"callback\\\\\\",\\\\n              target_id: targetId,\\\\n              id: cid,\\\\n              args: args,\\\\n              promise: encodedPromise\\\\n            }, transferables);\\\\n          } catch (e) {\\\\n            reject(`Failed to exectue remote callback ( id: ${cid}).`);\\\\n          }\\\\n        });\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    } else {\\\\n      remoteCallback = async function () {\\\\n        const args = await me._wrap(Array.prototype.slice.call(arguments));\\\\n        const transferables = args.__transferables__;\\\\n        if (transferables) delete args.__transferables__;\\\\n        return me._connection.emit({\\\\n          type: \\\\\\"callback\\\\\\",\\\\n          target_id: targetId,\\\\n          id: cid,\\\\n          args: args\\\\n        }, transferables);\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Sends the notification message and breaks the connection\\\\n   */\\\\n\\\\n\\\\n  disconnect() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\"disconnect\\\\\\"\\\\n    });\\\\n\\\\n    setTimeout(() => {\\\\n      this._connection.disconnect();\\\\n    }, 2000);\\\\n  }\\\\n\\\\n}\\\\n/**\\\\n * ReferenceStore is a special object which stores other objects\\\\n * and provides the references (number) instead. This reference\\\\n * may then be sent over a json-based communication channel (IPC\\\\n * to another Node.js process or a message to the Worker). Other\\\\n * site may then provide the reference in the responce message\\\\n * implying the given object should be activated.\\\\n *\\\\n * Primary usage for the ReferenceStore is a storage for the\\\\n * callbacks, which therefore makes it possible to initiate a\\\\n * callback execution by the opposite site (which normally cannot\\\\n * directly execute functions over the communication channel).\\\\n *\\\\n * Each stored object can only be fetched once and is not\\\\n * available for the second time. Each stored object must be\\\\n * fetched, since otherwise it will remain stored forever and\\\\n * consume memory.\\\\n *\\\\n * Stored object indeces are simply the numbers, which are however\\\\n * released along with the objects, and are later reused again (in\\\\n * order to postpone the overflow, which should not likely happen,\\\\n * but anyway).\\\\n */\\\\n\\\\nclass ReferenceStore {\\\\n  constructor() {\\\\n    this._store = {}; // stored object\\\\n\\\\n    this._indices = [0]; // smallest available indices\\\\n\\\\n    this._readyHandler = function () {};\\\\n\\\\n    this._busyHandler = function () {};\\\\n\\\\n    this._readyHandler();\\\\n  }\\\\n  /**\\\\n   * call handler when the store is empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onReady(readyHandler) {\\\\n    this._readyHandler = readyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * call handler when the store is not empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onBusy(busyHandler) {\\\\n    this._busyHandler = busyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * get the length of the store\\\\n   *\\\\n   */\\\\n\\\\n\\\\n  getStack() {\\\\n    return Object.keys(this._store).length;\\\\n  }\\\\n  /**\\\\n   * @function _genId() generates the new reference id\\\\n   *\\\\n   * @returns {Number} smallest available id and reserves it\\\\n   */\\\\n\\\\n\\\\n  _genId() {\\\\n    let id;\\\\n\\\\n    if (this._indices.length === 1) {\\\\n      id = this._indices[0]++;\\\\n    } else {\\\\n      id = this._indices.shift();\\\\n    }\\\\n\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Releases the given reference id so that it will be available by\\\\n   * another object stored\\\\n   *\\\\n   * @param {Number} id to release\\\\n   */\\\\n\\\\n\\\\n  _releaseId(id) {\\\\n    for (let i = 0; i < this._indices.length; i++) {\\\\n      if (id < this._indices[i]) {\\\\n        this._indices.splice(i, 0, id);\\\\n\\\\n        break;\\\\n      }\\\\n    } // cleaning-up the sequence tail\\\\n\\\\n\\\\n    for (let i = this._indices.length - 1; i >= 0; i--) {\\\\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\\\\n        this._indices.pop();\\\\n      } else {\\\\n        break;\\\\n      }\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Stores the given object and returns the refernce id instead\\\\n   *\\\\n   * @param {Object} obj to store\\\\n   *\\\\n   * @returns {Number} reference id of the stored object\\\\n   */\\\\n\\\\n\\\\n  put(obj) {\\\\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\\\\n      this._busyHandler();\\\\n    }\\\\n\\\\n    const id = this._genId();\\\\n\\\\n    this._store[id] = obj;\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Retrieves previously stored object and releases its reference\\\\n   *\\\\n   * @param {Number} id of an object to retrieve\\\\n   */\\\\n\\\\n\\\\n  fetch(id) {\\\\n    const obj = this._store[id];\\\\n\\\\n    if (obj && !obj.__remote_method) {\\\\n      delete this._store[id];\\\\n\\\\n      this._releaseId(id);\\\\n\\\\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\\\\n        this._readyHandler();\\\\n      }\\\\n    }\\\\n\\\\n    if (obj && obj.__promise_pair) {\\\\n      this.fetch(obj.__promise_pair);\\\\n    }\\\\n\\\\n    return obj;\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/rpc.js\\\\n\\");\\n\\n/***/ }),\\n\\n/***/ \\"./src/utils.js\\":\\n/*!**********************!*\\\\\\n  !*** ./src/utils.js ***!\\n  \\\\**********************/\\n/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, MessageEmitter */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\"use strict\\";\\neval(\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"randId\\\\\\", function() { return randId; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"dtypeToTypedArray\\\\\\", function() { return dtypeToTypedArray; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"typedArrayToDtype\\\\\\", function() { return typedArrayToDtype; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"cacheRequirements\\\\\\", function() { return cacheRequirements; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"setupServiceWorker\\\\\\", function() { return setupServiceWorker; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"urlJoin\\\\\\", function() { return urlJoin; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\"MessageEmitter\\\\\\", function() { return MessageEmitter; });\\\\nfunction randId() {\\\\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\\\\n}\\\\nconst dtypeToTypedArray = {\\\\n  int8: \\\\\\"Int8Array\\\\\\",\\\\n  int16: \\\\\\"Int16Array\\\\\\",\\\\n  int32: \\\\\\"Int32Array\\\\\\",\\\\n  uint8: \\\\\\"Uint8Array\\\\\\",\\\\n  uint16: \\\\\\"Uint16Array\\\\\\",\\\\n  uint32: \\\\\\"Uint32Array\\\\\\",\\\\n  float32: \\\\\\"Float32Array\\\\\\",\\\\n  float64: \\\\\\"Float64Array\\\\\\",\\\\n  array: \\\\\\"Array\\\\\\"\\\\n};\\\\nconst typedArrayToDtype = {\\\\n  Int8Array: \\\\\\"int8\\\\\\",\\\\n  Int16Array: \\\\\\"int16\\\\\\",\\\\n  Int32Array: \\\\\\"int32\\\\\\",\\\\n  Uint8Array: \\\\\\"uint8\\\\\\",\\\\n  Uint16Array: \\\\\\"uint16\\\\\\",\\\\n  Uint32Array: \\\\\\"uint32\\\\\\",\\\\n  Float32Array: \\\\\\"float32\\\\\\",\\\\n  Float64Array: \\\\\\"float64\\\\\\",\\\\n  Array: \\\\\\"array\\\\\\"\\\\n};\\\\n\\\\nfunction cacheUrlInServiceWorker(url) {\\\\n  return new Promise(function (resolve, reject) {\\\\n    const message = {\\\\n      command: \\\\\\"add\\\\\\",\\\\n      url: url\\\\n    };\\\\n\\\\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\\\\n      reject(\\\\\\"Service worker is not supported.\\\\\\");\\\\n      return;\\\\n    }\\\\n\\\\n    const messageChannel = new MessageChannel();\\\\n\\\\n    messageChannel.port1.onmessage = function (event) {\\\\n      if (event.data && event.data.error) {\\\\n        reject(event.data.error);\\\\n      } else {\\\\n        resolve(event.data && event.data.result);\\\\n      }\\\\n    };\\\\n\\\\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\\\\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\\\\n    } else {\\\\n      reject(\\\\\\"Service worker controller is not available\\\\\\");\\\\n    }\\\\n  });\\\\n}\\\\n\\\\nasync function cacheRequirements(requirements) {\\\\n  if (!Array.isArray(requirements)) {\\\\n    requirementsm.code.requirements = [requirements];\\\\n  }\\\\n\\\\n  if (requirements && requirements.length > 0) {\\\\n    for (let req of requirements) {\\\\n      //remove prefix\\\\n      if (req.startsWith(\\\\\\"js:\\\\\\")) req = req.slice(3);\\\\n      if (req.startsWith(\\\\\\"css:\\\\\\")) req = req.slice(4);\\\\n      if (req.startsWith(\\\\\\"cache:\\\\\\")) req = req.slice(6);\\\\n      if (!req.startsWith(\\\\\\"http\\\\\\")) continue;\\\\n      await cacheUrlInServiceWorker(req).catch(e => {\\\\n        console.error(e);\\\\n      });\\\\n    }\\\\n  }\\\\n}\\\\nfunction setupServiceWorker(baseUrl, targetOrigin, cacheCallback) {\\\\n  // register service worker for offline access\\\\n  if (\\\\\\"serviceWorker\\\\\\" in navigator) {\\\\n    baseUrl = baseUrl || \\\\\\"/\\\\\\";\\\\n    navigator.serviceWorker.register(baseUrl + \\\\\\"plugin-service-worker.js\\\\\\").then(function (registration) {\\\\n      // Registration was successful\\\\n      console.log(\\\\\\"ServiceWorker registration successful with scope: \\\\\\", registration.scope);\\\\n    }, function (err) {\\\\n      // registration failed :(\\\\n      console.log(\\\\\\"ServiceWorker registration failed: \\\\\\", err);\\\\n    });\\\\n    targetOrigin = targetOrigin || \\\\\\"*\\\\\\";\\\\n    cacheCallback = cacheCallback || cacheRequirements;\\\\n\\\\n    if (cacheCallback && typeof cacheCallback !== \\\\\\"function\\\\\\") {\\\\n      throw new Error(\\\\\\"config.cache_requirements must be a function\\\\\\");\\\\n    }\\\\n\\\\n    window.addEventListener(\\\\\\"message\\\\\\", function (e) {\\\\n      if (targetOrigin === \\\\\\"*\\\\\\" || e.origin === targetOrigin) {\\\\n        const m = e.data;\\\\n\\\\n        if (m.type === \\\\\\"cacheRequirements\\\\\\") {\\\\n          cacheCallback(m.requirements);\\\\n        }\\\\n      }\\\\n    });\\\\n  }\\\\n} //#Source https://bit.ly/2neWfJ2\\\\n\\\\nfunction urlJoin(...args) {\\\\n  return args.join(\\\\\\"/\\\\\\").replace(/[\\\\\\\\/]+/g, \\\\\\"/\\\\\\").replace(/^(.+):\\\\\\\\//, \\\\\\"$1://\\\\\\").replace(/^file:/, \\\\\\"file:/\\\\\\").replace(/\\\\\\\\/(\\\\\\\\?|&|#[^!])/g, \\\\\\"$1\\\\\\").replace(/\\\\\\\\?/g, \\\\\\"&\\\\\\").replace(\\\\\\"&\\\\\\", \\\\\\"?\\\\\\");\\\\n}\\\\nclass MessageEmitter {\\\\n  constructor(debug) {\\\\n    this._event_handlers = {};\\\\n    this._once_handlers = {};\\\\n    this._debug = debug;\\\\n  }\\\\n\\\\n  emit() {\\\\n    throw new Error(\\\\\\"emit is not implemented\\\\\\");\\\\n  }\\\\n\\\\n  on(event, handler) {\\\\n    if (!this._event_handlers[event]) {\\\\n      this._event_handlers[event] = [];\\\\n    }\\\\n\\\\n    this._event_handlers[event].push(handler);\\\\n  }\\\\n\\\\n  once(event, handler) {\\\\n    handler.___event_run_once = true;\\\\n    this.on(event, handler);\\\\n  }\\\\n\\\\n  off(event, handler) {\\\\n    if (!event && !handler) {\\\\n      // remove all events handlers\\\\n      this._event_handlers = {};\\\\n    } else if (event && !handler) {\\\\n      // remove all hanlders for the event\\\\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\\\\n    } else {\\\\n      // remove a specific handler\\\\n      if (this._event_handlers[event]) {\\\\n        const idx = this._event_handlers[event].indexOf(handler);\\\\n\\\\n        if (idx >= 0) {\\\\n          this._event_handlers[event].splice(idx, 1);\\\\n        }\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  _fire(event, data) {\\\\n    if (this._event_handlers[event]) {\\\\n      var i = this._event_handlers[event].length;\\\\n\\\\n      while (i--) {\\\\n        const handler = this._event_handlers[event][i];\\\\n\\\\n        try {\\\\n          handler(data);\\\\n        } catch (e) {\\\\n          console.error(e);\\\\n        } finally {\\\\n          if (handler.___event_run_once) {\\\\n            this._event_handlers[event].splice(i, 1);\\\\n          }\\\\n        }\\\\n      }\\\\n    } else {\\\\n      if (this._debug) {\\\\n        console.warn(\\\\\\"unhandled event\\\\\\", event, data);\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/utils.js\\\\n\\");\\n\\n/***/ })\\n\\n/******/ });", null);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\n')},"./src/pluginCore.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectRPC", function() { return connectRPC; });\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ "./src/rpc.js");\n/**\n * Core plugin script loaded into the plugin process/thread.\n *\n * Initializes the plugin-site API global methods.\n */\n\nfunction connectRPC(connection, config) {\n  config = config || {};\n  const codecs = {};\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__["RPC"](connection, config, codecs);\n  rpc.on("getInterface", function () {\n    launchConnected();\n  });\n  rpc.on("remoteReady", function () {\n    const api = rpc.getRemote() || {};\n\n    if (api.export) {\n      throw new Error("`export` is a reserved function name");\n    }\n\n    if (api.onload) {\n      throw new Error("`onload` is a reserved function name");\n    }\n\n    if (api.dispose) {\n      throw new Error("`dispose` is a reserved function name");\n    }\n\n    api.registerCodec = function (config) {\n      if (!config["name"] || !config["encoder"] && !config["decoder"]) {\n        throw new Error("Invalid codec format, please make sure you provide a name, type, encoder and decoder.");\n      } else {\n        if (config.type) {\n          for (let k of Object.keys(codecs)) {\n            if (codecs[k].type === config.type || k === config.name) {\n              delete codecs[k];\n              console.warn("Remove duplicated codec: " + k);\n            }\n          }\n        }\n\n        codecs[config["name"]] = config;\n      }\n    };\n\n    api.disposeObject = function (obj) {\n      rpc.disposeObject(obj);\n    };\n\n    api.export = function (_interface, config) {\n      rpc.setInterface(_interface, config);\n    };\n\n    api.onLoad = function (handler) {\n      handler = checkHandler(handler);\n\n      if (connected) {\n        handler();\n      } else {\n        connectedHandlers.push(handler);\n      }\n    };\n\n    api.dispose = function (_interface) {\n      rpc.disconnect();\n    };\n\n    if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {\n      self.api = api;\n      self.postMessage({\n        type: "imjoy_remote_api_ready"\n      });\n    } else if (typeof window) {\n      window.dispatchEvent(new CustomEvent("imjoy_remote_api_ready", {\n        detail: api\n      }));\n    }\n  });\n  let connected = false;\n  const connectedHandlers = [];\n\n  const launchConnected = function () {\n    if (!connected) {\n      connected = true;\n      let handler;\n\n      while (handler = connectedHandlers.pop()) {\n        handler();\n      }\n    }\n  };\n\n  const checkHandler = function (handler) {\n    const type = typeof handler;\n\n    if (type !== "function") {\n      const msg = "A function may only be subsribed to the event, " + type + " was provided instead";\n      throw new Error(msg);\n    }\n\n    return handler;\n  };\n\n  return rpc;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbkNvcmUuanM/YTgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcmUgcGx1Z2luIHNjcmlwdCBsb2FkZWQgaW50byB0aGUgcGx1Z2luIHByb2Nlc3MvdGhyZWFkLlxuICpcbiAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4tc2l0ZSBBUEkgZ2xvYmFsIG1ldGhvZHMuXG4gKi9cbmltcG9ydCB7IFJQQyB9IGZyb20gXCIuL3JwYy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFJQQyhjb25uZWN0aW9uLCBjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25zdCBjb2RlY3MgPSB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKTtcbiAgcnBjLm9uKFwiZ2V0SW50ZXJmYWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGxhdW5jaENvbm5lY3RlZCgpO1xuICB9KTtcblxuICBycGMub24oXCJyZW1vdGVSZWFkeVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcGkgPSBycGMuZ2V0UmVtb3RlKCkgfHwge307XG4gICAgaWYgKGFwaS5leHBvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBleHBvcnRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBvbmxvYWRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5kaXNwb3NlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGlzcG9zZWAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXCIpO1xuICAgIH1cbiAgICBhcGkucmVnaXN0ZXJDb2RlYyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgaWYgKCFjb25maWdbXCJuYW1lXCJdIHx8ICghY29uZmlnW1wiZW5jb2RlclwiXSAmJiAhY29uZmlnW1wiZGVjb2RlclwiXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSW52YWxpZCBjb2RlYyBmb3JtYXQsIHBsZWFzZSBtYWtlIHN1cmUgeW91IHByb3ZpZGUgYSBuYW1lLCB0eXBlLCBlbmNvZGVyIGFuZCBkZWNvZGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGNvZGVjcykpIHtcbiAgICAgICAgICAgIGlmIChjb2RlY3Nba10udHlwZSA9PT0gY29uZmlnLnR5cGUgfHwgayA9PT0gY29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGNvZGVjc1trXTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVtb3ZlIGR1cGxpY2F0ZWQgY29kZWM6IFwiICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvZGVjc1tjb25maWdbXCJuYW1lXCJdXSA9IGNvbmZpZztcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICBycGMuZGlzcG9zZU9iamVjdChvYmopO1xuICAgIH07XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UsIGNvbmZpZykge1xuICAgICAgcnBjLnNldEludGVyZmFjZShfaW50ZXJmYWNlLCBjb25maWcpO1xuICAgIH07XG4gICAgYXBpLm9uTG9hZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIgPSBjaGVja0hhbmRsZXIoaGFuZGxlcik7XG4gICAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3RlZEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGkuZGlzcG9zZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xuICBjb25zdCBjb25uZWN0ZWRIYW5kbGVycyA9IFtdO1xuXG4gIGNvbnN0IGxhdW5jaENvbm5lY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBjb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBsZXQgaGFuZGxlcjtcbiAgICAgIHdoaWxlICgoaGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXJzLnBvcCgpKSkge1xuICAgICAgICBoYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgbXNnID1cbiAgICAgICAgXCJBIGZ1bmN0aW9uIG1heSBvbmx5IGJlIHN1YnNyaWJlZCB0byB0aGUgZXZlbnQsIFwiICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgIFwiIHdhcyBwcm92aWRlZCBpbnN0ZWFkXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH07XG5cbiAgcmV0dXJuIHJwYztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pluginCore.js\n')},"./src/pluginIframe.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return Connection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setupIframe; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ "./src/pluginCore.js");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ "./src/rpc.js");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement("template");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nvar _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement("script");\n    scriptTag.src = url;\n    scriptTag.type = "text/javascript";\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === "loaded" || this.readyState === "complete") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nclass Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__["MessageEmitter"] {\n  constructor(config) {\n    super(config && config.debug);\n    this.config = config || {};\n    this.peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["randId"])();\n  }\n\n  connect() {\n    this.config.target_origin = this.config.target_origin || "*"; // this will call handleEvent function\n\n    window.addEventListener("message", this);\n    this.emit({\n      type: "initialized",\n      config: this.config,\n      origin: window.location.origin,\n      peer_id: this.peer_id\n    });\n\n    this._fire("connected");\n  }\n\n  handleEvent(e) {\n    if (e.type === "message" && (this.config.target_origin === "*" || e.origin === this.config.target_origin)) {\n      if (e.data.peer_id === this.peer_id) {\n        this._fire(e.data.type, e.data);\n      } else if (this.config.debug) {\n        console.log(`connection peer id mismatch ${e.data.peer_id} !== ${this.peer_id}`);\n      }\n    }\n  }\n\n  disconnect() {\n    this._fire("beforeDisconnect");\n\n    window.removeEventListener("message", this);\n\n    this._fire("disconnected");\n  }\n\n  emit(data) {\n    let transferables;\n\n    if (data.__transferables__) {\n      transferables = data.__transferables__;\n      delete data.__transferables__;\n    }\n\n    parent.postMessage(data, this.config.target_origin, transferables);\n  }\n\n  async execute(code) {\n    try {\n      if (code.type === "requirements") {\n        if (code.requirements && (Array.isArray(code.requirements) || typeof code.requirements === "string")) {\n          try {\n            var link_node;\n            code.requirements = typeof code.requirements === "string" ? [code.requirements] : code.requirements;\n\n            if (Array.isArray(code.requirements)) {\n              for (var i = 0; i < code.requirements.length; i++) {\n                if (code.requirements[i].toLowerCase().endsWith(".css") || code.requirements[i].startsWith("css:")) {\n                  if (code.requirements[i].startsWith("css:")) {\n                    code.requirements[i] = code.requirements[i].slice(4);\n                  }\n\n                  link_node = document.createElement("link");\n                  link_node.rel = "stylesheet";\n                  link_node.href = code.requirements[i];\n                  document.head.appendChild(link_node);\n                } else if (code.requirements[i].toLowerCase().endsWith(".js") || code.requirements[i].startsWith("js:")) {\n                  if (code.requirements[i].startsWith("js:")) {\n                    code.requirements[i] = code.requirements[i].slice(3);\n                  }\n\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith("http")) {\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith("cache:")) {//ignore cache\n                } else {\n                  console.log("Unprocessed requirements url: " + code.requirements[i]);\n                }\n              }\n            } else {\n              throw "unsupported requirements definition";\n            }\n          } catch (e) {\n            throw "failed to import required scripts: " + code.requirements.toString();\n          }\n        }\n      } else if (code.type === "script") {\n        if (code.src) {\n          var script_node = document.createElement("script");\n          script_node.setAttribute("type", code.attrs.type);\n          script_node.setAttribute("src", code.src);\n          document.head.appendChild(script_node);\n        } else {\n          if (code.content && (!code.attrs.type || code.attrs.type === "text/javascript")) {\n            // document.addEventListener("DOMContentLoaded", function(){\n            eval(code.content); // });\n          } else {\n            var node = document.createElement("script");\n            node.setAttribute("type", code.attrs.type);\n            node.appendChild(document.createTextNode(code.content));\n            document.body.appendChild(node);\n          }\n        }\n      } else if (code.type === "style") {\n        const style_node = document.createElement("style");\n\n        if (code.src) {\n          style_node.src = code.src;\n        }\n\n        style_node.innerHTML = code.content;\n        document.head.appendChild(style_node);\n      } else if (code.type === "link") {\n        const link_node_ = document.createElement("link");\n\n        if (code.rel) {\n          link_node_.rel = code.rel;\n        }\n\n        if (code.href) {\n          link_node_.href = code.href;\n        }\n\n        if (code.attrs && code.attrs.type) {\n          link_node_.type = code.attrs.type;\n        }\n\n        document.head.appendChild(link_node_);\n      } else if (code.type === "html") {\n        document.body.appendChild(_htmlToElement(code.content));\n      } else {\n        throw "unsupported code type.";\n      }\n\n      parent.postMessage({\n        type: "executed"\n      }, this.config.target_origin);\n    } catch (e) {\n      console.error("failed to execute scripts: ", code, e);\n      parent.postMessage({\n        type: "executed",\n        error: e.stack || String(e)\n      }, this.config.target_origin);\n    }\n  }\n\n}\nfunction setupIframe(config) {\n  config = config || {};\n  config.dedicated_thread = false;\n  config.lang = "javascript";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__["API_VERSION"];\n  const conn = new Connection(config);\n  Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__["connectRPC"])(conn, config);\n  conn.connect();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pluginIframe.js\n')},"./src/pluginWebPython.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return setupWebPython; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ "./src/pluginCore.js");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ "./src/rpc.js");\n/* harmony import */ var _pluginIframe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginIframe */ "./src/pluginIframe.js");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement("template");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nconst _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement("script");\n    scriptTag.src = url;\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === "loaded" || this.readyState === "complete") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nconst startup_script = `\nfrom js import api\nimport sys\nfrom types import ModuleType\nm = ModuleType("imjoy")\nsys.modules[m.__name__] = m\nm.__file__ = m.__name__ + ".py"\nm.api = api\n`;\nlet _export_plugin_api = null;\n\nconst execute_python_code = function (code) {\n  try {\n    if (!_export_plugin_api) {\n      _export_plugin_api = window.api.export;\n\n      window.api.export = function (p) {\n        if (typeof p === "object") {\n          const _api = {};\n\n          for (let k in p) {\n            if (!k.startsWith("_")) {\n              _api[k] = p[k];\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else if (typeof p === "function") {\n          const _api = {};\n          const getattr = window.pyodide.pyimport("getattr");\n          const hasattr = window.pyodide.pyimport("hasattr");\n\n          for (let k of Object.getOwnPropertyNames(p)) {\n            if (!k.startsWith("_") && hasattr(p, k)) {\n              const func = getattr(p, k);\n\n              _api[k] = function () {\n                return func(...Array.prototype.slice.call(arguments));\n              };\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else {\n          throw "unsupported api export";\n        }\n      };\n    }\n\n    window.pyodide.runPython(startup_script);\n    window.pyodide.runPython(code.content);\n  } catch (e) {\n    throw e;\n  }\n};\n\nfunction setupPyodide() {\n  return new Promise((resolve, reject) => {\n    window.languagePluginUrl = "https://static.imjoy.io/pyodide/";\n    importScripts("https://static.imjoy.io/pyodide/pyodide.js").then(() => {\n      // hack for matplotlib etc.\n      window.iodide = {\n        output: {\n          element: function element(type) {\n            const div = document.createElement(type);\n            const output = document.getElementById("output") || document.body;\n            output.appendChild(div);\n            return div;\n          }\n        }\n      };\n      window.languagePluginLoader.then(() => {\n        // pyodide is now ready to use...\n        console.log(window.pyodide.runPython("import sys\\nsys.version"));\n        resolve();\n      }).catch(reject);\n    });\n  });\n} // connection object for the RPC constructor\n\n\nclass Connection extends _pluginIframe__WEBPACK_IMPORTED_MODULE_2__["Connection"] {\n  constructor(config) {\n    super(config);\n  }\n\n  async execute(code) {\n    if (code.type === "requirements") {\n      if (code.requirements) {\n        code.requirements = typeof code.requirements === "string" ? [code.requirements] : code.requirements;\n\n        if (Array.isArray(code.requirements)) {\n          const python_packages = [];\n\n          for (var i = 0; i < code.requirements.length; i++) {\n            if (code.requirements[i].toLowerCase().endsWith(".css") || code.requirements[i].startsWith("css:")) {\n              if (code.requirements[i].startsWith("css:")) {\n                code.requirements[i] = code.requirements[i].slice(4);\n              }\n\n              link_node = document.createElement("link");\n              link_node.rel = "stylesheet";\n              link_node.href = code.requirements[i];\n              document.head.appendChild(link_node);\n            } else if ( // code.requirements[i].toLowerCase().endsWith(".js") ||\n            code.requirements[i].startsWith("js:")) {\n              if (code.requirements[i].startsWith("js:")) {\n                code.requirements[i] = code.requirements[i].slice(3);\n              }\n\n              await importScripts(code.requirements[i]);\n            } else if (code.requirements[i].startsWith("cache:")) {//ignore cache\n            } else if (code.requirements[i].toLowerCase().endsWith(".js") || code.requirements[i].startsWith("package:")) {\n              if (code.requirements[i].startsWith("package:")) {\n                code.requirements[i] = code.requirements[i].slice(8);\n              }\n\n              python_packages.push(code.requirements[i]);\n            } else if (code.requirements[i].startsWith("http:") || code.requirements[i].startsWith("https:")) {\n              console.log("Unprocessed requirements url: " + code.requirements[i]);\n            } else {\n              python_packages.push(code.requirements[i]);\n            }\n          }\n\n          await window.pyodide.loadPackage(python_packages);\n        } else {\n          throw "unsupported requirements definition";\n        }\n      }\n    } else if (code.type === "script") {\n      if (code.src) {\n        var script_node = document.createElement("script");\n        script_node.setAttribute("type", code.attrs.type);\n        script_node.setAttribute("src", code.src);\n        document.head.appendChild(script_node);\n      } else {\n        if (code.content && code.lang === "python") {\n          execute_python_code(code);\n        } else if (code.content && code.lang === "javascript") {\n          try {\n            eval(code.content);\n          } catch (e) {\n            console.error(e.message, e.stack);\n            throw e;\n          }\n        } else {\n          const node = document.createElement("script");\n          node.setAttribute("type", code.attrs.type);\n          node.appendChild(document.createTextNode(code.content));\n          document.body.appendChild(node);\n        }\n      }\n    } else if (code.type === "style") {\n      const style_node = document.createElement("style");\n\n      if (code.src) {\n        style_node.src = code.src;\n      }\n\n      style_node.innerHTML = code.content;\n      document.head.appendChild(style_node);\n    } else if (code.type === "link") {\n      const link_node = document.createElement("link");\n\n      if (code.rel) {\n        link_node.rel = code.rel;\n      }\n\n      if (code.href) {\n        link_node.href = code.href;\n      }\n\n      if (code.attrs && code.attrs.type) {\n        link_node.type = code.attrs.type;\n      }\n\n      document.head.appendChild(link_node);\n    } else if (code.type === "html") {\n      document.body.appendChild(_htmlToElement(code.content));\n    } else {\n      throw "unsupported code type.";\n    }\n  }\n\n}\n\nfunction setupWebPython(config) {\n  config = config || {};\n  config.debug = true;\n  config.dedicated_thread = false;\n  config.lang = "python";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__["API_VERSION"];\n  const conn = new Connection(config);\n  setupPyodide().then(() => {\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__["connectRPC"])(conn, config);\n    conn.connect();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pluginWebPython.js\n')},"./src/rpc.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_VERSION", function() { return API_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RPC", function() { return RPC; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");\n/**\n * Contains the RPC object used both by the application\n * site, and by each plugin\n */\n\nconst API_VERSION = "0.2.3";\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\n\nfunction _appendBuffer(buffer1, buffer2) {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction indexObject(obj, is) {\n  if (!is) throw new Error("undefined index");\n  if (typeof is === "string") return indexObject(obj, is.split("."));else if (is.length === 0) return obj;else return indexObject(obj[is[0]], is.slice(1));\n}\n/**\n * RPC object represents a single site in the\n * communication protocol between the application and the plugin\n *\n * @param {Object} connection a special object allowing to send\n * and receive messages from the opposite site (basically it\n * should only provide send() and onMessage() methods)\n */\n\n\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__["MessageEmitter"] {\n  constructor(connection, config, codecs) {\n    super(config && config.debug);\n    this._connection = connection;\n    this.config = config || {};\n    this._codecs = codecs || {};\n    this._object_store = {};\n    this._method_weakmap = new WeakMap();\n    this._object_weakmap = new WeakMap();\n    this._local_api = null; // make sure there is an execute function\n\n    const name = this.config.name;\n\n    this._connection.execute = this._connection.execute || function () {\n      throw new Error(`connection.execute not implemented (in "${name}")`);\n    };\n\n    this._store = new ReferenceStore();\n    this._method_refs = new ReferenceStore();\n\n    this._method_refs.onReady(() => {\n      this._fire("remoteIdle");\n    });\n\n    this._method_refs.onBusy(() => {\n      this._fire("remoteBusy");\n    });\n\n    this._setupMessageHanlders();\n  }\n\n  init() {\n    this._connection.emit({\n      type: "initialized",\n      config: this.config,\n      peer_id: this._connection.peer_id\n    });\n  }\n  /**\n   * Set a handler to be called when received a responce from the\n   * remote site reporting that the previously provided interface\n   * has been successfully set as remote for that site\n   *\n   * @param {Function} handler\n   */\n\n\n  getRemoteCallStack() {\n    return this._method_refs.getStack();\n  }\n  /**\n   * @returns {Object} set of remote interface methods\n   */\n\n\n  getRemote() {\n    return this._remote_interface;\n  }\n  /**\n   * Sets the interface of this site making it available to the\n   * remote site by sending a message with a set of methods names\n   *\n   * @param {Object} _interface to set\n   */\n\n\n  setInterface(_interface, config) {\n    config = config || {};\n    this.config.name = config.name || this.config.name;\n    this.config.description = config.description || this.config.description;\n\n    if (this.config.forwarding_functions) {\n      for (let func_name of this.config.forwarding_functions) {\n        const _remote = this._remote_interface;\n\n        if (_remote[func_name]) {\n          if (_interface.constructor === Object) {\n            if (!_interface[func_name]) {\n              _interface[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          } else if (_interface.constructor.constructor === Function) {\n            if (!_interface.constructor.prototype[func_name]) {\n              _interface.constructor.prototype[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          }\n        }\n      }\n    }\n\n    this._local_api = _interface;\n\n    this._fire("interfaceAvailable");\n  }\n  /**\n   * Sends the actual interface to the remote site upon it was\n   * updated or by a special request of the remote site\n   */\n\n\n  sendInterface() {\n    if (!this._local_api) {\n      throw new Error("interface is not set.");\n    }\n\n    this._encode(this._local_api, true).then(api => {\n      this._connection.emit({\n        type: "setInterface",\n        api: api\n      });\n    });\n  }\n\n  _disposeObject(objectId) {\n    if (this._object_store[objectId]) {\n      delete this._object_store[objectId];\n    } else {\n      throw new Error(`Object (id=${objectId}) not found.`);\n    }\n  }\n\n  disposeObject(obj) {\n    return new Promise((resolve, reject) => {\n      if (this._object_weakmap.has(obj)) {\n        const objectId = this._object_weakmap.get(obj);\n\n        this._connection.once("disposed", data => {\n          if (data.error) reject(new Error(data.error));else resolve();\n        });\n\n        this._connection.emit({\n          type: "disposeObject",\n          object_id: objectId\n        });\n      } else {\n        throw new Error("Invalid object");\n      }\n    });\n  }\n  /**\n   * Handles a message from the remote site\n   */\n\n\n  _setupMessageHanlders() {\n    this._connection.on("init", this.init);\n\n    this._connection.on("execute", data => {\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\n        this._connection.emit({\n          type: "executed"\n        });\n      }).catch(e => {\n        console.error(e);\n\n        this._connection.emit({\n          type: "executed",\n          error: String(e)\n        });\n      });\n    });\n\n    this._connection.on("method", async data => {\n      let resolve, reject, method, method_this, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        const _interface = this._object_store[data.object_id];\n        method = indexObject(_interface, data.name);\n\n        if (data.name.includes(".")) {\n          const tmp = data.name.split(".");\n          const intf_index = tmp.slice(0, tmp.length - 1).join(".");\n          method_this = indexObject(_interface, intf_index);\n        } else {\n          method_this = _interface;\n        }\n\n        args = await this._unwrap(data.args, true);\n\n        if (data.promise) {\n          result = method.apply(method_this, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === "AsyncFunction") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method.apply(method_this, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on("callback", async data => {\n      let resolve, reject, method, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        if (data.promise) {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error("Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.");\n          }\n\n          result = method.apply(null, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === "AsyncFunction") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error("Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.");\n          }\n\n          method.apply(null, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on("disposeObject", data => {\n      try {\n        this._disposeObject(data.object_id);\n\n        this._connection.emit({\n          type: "disposed"\n        });\n      } catch (e) {\n        console.error(e);\n\n        this._connection.emit({\n          type: "disposed",\n          error: String(e)\n        });\n      }\n    });\n\n    this._connection.on("setInterface", data => {\n      this._setRemoteInterface(data.api);\n    });\n\n    this._connection.on("getInterface", () => {\n      this._fire("getInterface");\n\n      if (this._local_api) {\n        this.sendInterface();\n      } else {\n        this.once("interfaceAvailable", () => {\n          this.sendInterface();\n        });\n      }\n    });\n\n    this._connection.on("interfaceSetAsRemote", () => {\n      this._fire("interfaceSetAsRemote");\n    });\n\n    this._connection.on("disconnect", () => {\n      this._fire("beforeDisconnect");\n\n      this._connection.disconnect();\n\n      this._fire("disconnected");\n    });\n  }\n  /**\n   * Sends a requests to the remote site asking it to provide its\n   * current interface\n   */\n\n\n  requestRemote() {\n    this._connection.emit({\n      type: "getInterface"\n    });\n  }\n\n  _ndarray(typedArray, shape, dtype) {\n    const _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__["typedArrayToDtype"][typedArray.constructor.name];\n\n    if (dtype && dtype !== _dtype) {\n      throw "dtype doesn\'t match the type of the array: " + _dtype + " != " + dtype;\n    }\n\n    shape = shape || [typedArray.length];\n    return {\n      _rtype: "ndarray",\n      _rvalue: typedArray.buffer,\n      _rshape: shape,\n      _rdtype: _dtype\n    };\n  }\n  /**\n   * Sets the new remote interface provided by the other site\n   *\n   * @param {Array} names list of function names\n   */\n\n\n  _setRemoteInterface(api) {\n    this._decode(api).then(intf => {\n      this._remote_interface = intf;\n\n      this._fire("remoteReady");\n\n      this._reportRemoteSet();\n    });\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * method. When the generated function is called, it will send the\n   * corresponding message to the remote site asking it to execute\n   * the particular method of its interface\n   *\n   * @param {String} name of the remote method\n   *\n   * @returns {Function} wrapped remote method\n   */\n\n\n  _genRemoteMethod(targetId, name, objectId) {\n    const me = this;\n\n    const remoteMethod = function () {\n      return new Promise(async (resolve, reject) => {\n        let id = null;\n\n        try {\n          id = me._method_refs.put(objectId ? objectId + "/" + name : name);\n\n          const wrapped_resolve = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return resolve.apply(this, arguments);\n          };\n\n          const wrapped_reject = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return reject.apply(this, arguments);\n          };\n\n          const encodedPromise = await me._wrap([wrapped_resolve, wrapped_reject]); // store the key id for removing them from the reference store together\n\n          wrapped_resolve.__promise_pair = encodedPromise[1]._rvalue;\n          wrapped_reject.__promise_pair = encodedPromise[0]._rvalue;\n          let args = Array.prototype.slice.call(arguments);\n\n          if (name === "register" || name === "export" || name === "on") {\n            args = await me._wrap(args, true);\n          } else {\n            args = await me._wrap(args);\n          }\n\n          const transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n\n          me._connection.emit({\n            type: "method",\n            target_id: targetId,\n            name: name,\n            object_id: objectId,\n            args: args,\n            promise: encodedPromise\n          }, transferables);\n        } catch (e) {\n          if (id) me._method_refs.fetch(id);\n          reject(`Failed to exectue remote method (interface: ${objectId || me.id}, method: ${name}), error: ${e}`);\n        }\n      });\n    };\n\n    remoteMethod.__remote_method = true;\n    return remoteMethod;\n  }\n  /**\n   * Sends a responce reporting that interface just provided by the\n   * remote site was successfully set by this site as remote\n   */\n\n\n  _reportRemoteSet() {\n    this._connection.emit({\n      type: "interfaceSetAsRemote"\n    });\n  }\n  /**\n   * Prepares the provided set of remote method arguments for\n   * sending to the remote site, replaces all the callbacks with\n   * identifiers\n   *\n   * @param {Array} args to wrap\n   *\n   * @returns {Array} wrapped arguments\n   */\n\n\n  async _encode(aObject, asInterface, objectId) {\n    const aType = typeof aObject;\n\n    if (aType === "number" || aType === "string" || aType === "boolean" || aObject === null || aObject === undefined || aObject instanceof ArrayBuffer) {\n      return aObject;\n    }\n\n    let bObject;\n\n    if (typeof aObject === "function") {\n      if (asInterface) {\n        if (!objectId) throw new Error("objectId is not specified.");\n        bObject = {\n          _rtype: "interface",\n          _rtarget_id: this._connection.peer_id,\n          _rintf: objectId,\n          _rvalue: asInterface\n        };\n\n        this._method_weakmap.set(aObject, bObject);\n      } else if (this._method_weakmap.has(aObject)) {\n        bObject = this._method_weakmap.get(aObject);\n      } else {\n        const cid = this._store.put(aObject);\n\n        bObject = {\n          _rtype: "callback",\n          _rtarget_id: this._connection.peer_id,\n          _rname: aObject.constructor && aObject.constructor.name || cid,\n          _rvalue: cid\n        };\n      }\n\n      return bObject;\n    } // skip if already encoded\n\n\n    if (aObject.constructor instanceof Object && aObject._rtype) {\n      // make sure the interface functions are encoded\n      if (aObject._rintf) {\n        const temp = aObject._rtype;\n        delete aObject._rtype;\n        bObject = await this._encode(aObject, asInterface, objectId);\n        bObject._rtype = temp;\n      } else {\n        bObject = aObject;\n      }\n\n      return bObject;\n    }\n\n    const transferables = [];\n    const _transfer = aObject._transfer;\n    const isarray = Array.isArray(aObject);\n\n    for (let tp of Object.keys(this._codecs)) {\n      const codec = this._codecs[tp];\n\n      if (codec.encoder && aObject instanceof codec.type) {\n        // TODO: what if multiple encoders found\n        let encodedObj = await Promise.resolve(codec.encoder(aObject));\n        if (encodedObj && !encodedObj._rtype) encodedObj._rtype = codec.name; // encode the functions in the interface object\n\n        if (encodedObj && encodedObj._rintf) {\n          const temp = encodedObj._rtype;\n          delete encodedObj._rtype;\n          encodedObj = await this._encode(encodedObj, asInterface, objectId);\n          encodedObj._rtype = temp;\n        }\n\n        bObject = encodedObj;\n        return bObject;\n      }\n    }\n\n    if (\n    /*global tf*/\n    typeof tf !== "undefined" && tf.Tensor && aObject instanceof tf.Tensor) {\n      const v_buffer = aObject.dataSync();\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(v_buffer.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: "ndarray",\n        _rvalue: v_buffer.buffer,\n        _rshape: aObject.shape,\n        _rdtype: aObject.dtype\n      };\n    } else if (\n    /*global nj*/\n    typeof nj !== "undefined" && nj.NdArray && aObject instanceof nj.NdArray) {\n      const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__["typedArrayToDtype"][aObject.selection.data.constructor.name];\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(aObject.selection.data.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: "ndarray",\n        _rvalue: aObject.selection.data.buffer,\n        _rshape: aObject.shape,\n        _rdtype: dtype\n      };\n    } else if (aObject instanceof Error) {\n      console.error(aObject);\n      bObject = {\n        _rtype: "error",\n        _rvalue: aObject.toString()\n      };\n    } else if (typeof File !== "undefined" && aObject instanceof File) {\n      bObject = {\n        _rtype: "file",\n        _rvalue: aObject,\n        _rpath: aObject._path || aObject.webkitRelativePath\n      };\n    } // send objects supported by structure clone algorithm\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    else if (aObject !== Object(aObject) || aObject instanceof Boolean || aObject instanceof String || aObject instanceof Date || aObject instanceof RegExp || aObject instanceof ImageData || typeof FileList !== "undefined" && aObject instanceof FileList) {\n        bObject = aObject; // TODO: avoid object such as DynamicPlugin instance.\n      } else if (typeof File !== "undefined" && aObject instanceof File) {\n        bObject = {\n          _rtype: "file",\n          _rname: aObject.name,\n          _rmime: aObject.type,\n          _rvalue: aObject,\n          _rpath: aObject._path || aObject.webkitRelativePath\n        };\n      } else if (aObject instanceof Blob) {\n        bObject = {\n          _rtype: "blob",\n          _rvalue: aObject\n        };\n      } else if (aObject instanceof ArrayBufferView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__["typedArrayToDtype"][aObject.constructor.name];\n        bObject = {\n          _rtype: "typedarray",\n          _rvalue: aObject.buffer,\n          _rdtype: dtype\n        };\n      } else if (aObject instanceof DataView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        bObject = {\n          _rtype: "memoryview",\n          _rvalue: aObject.buffer\n        };\n      } else if (aObject instanceof Set) {\n        bObject = {\n          _rtype: "set",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject instanceof Map) {\n        bObject = {\n          _rtype: "orderedmap",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject.constructor instanceof Object || Array.isArray(aObject)) {\n        bObject = isarray ? [] : {};\n        let keys; // an object/array\n\n        if (aObject.constructor === Object || Array.isArray(aObject)) {\n          keys = Object.keys(aObject);\n        } // a class\n        else if (aObject.constructor === Function) {\n            throw new Error("Please instantiate the class before exportting it.");\n          } // instance of a class\n          else if (aObject.constructor.constructor === Function) {\n              keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject)); // TODO: use a proxy object to represent the actual object\n              // always encode class instance as interface\n\n              asInterface = true;\n            } else {\n              throw Error("Unsupported interface type");\n            } // encode interfaces\n\n\n        if (aObject._rintf || asInterface) {\n          if (!objectId) {\n            objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["randId"])();\n            this._object_store[objectId] = aObject;\n          }\n\n          for (let k of keys) {\n            if (k === "constructor") continue;\n\n            if (k.startsWith("_")) {\n              continue;\n            }\n\n            bObject[k] = await this._encode(aObject[k], typeof asInterface === "string" ? asInterface + "." + k : k, objectId);\n          } // object id for dispose the object remotely\n\n\n          bObject._rintf = objectId; // remove interface when closed\n\n          if (aObject.on && typeof aObject.on === "function") {\n            aObject.on("close", () => {\n              delete this._object_store[objectId];\n            });\n          }\n        } else {\n          for (let k of keys) {\n            if (["hasOwnProperty", "constructor"].includes(k)) continue;\n            bObject[k] = await this._encode(aObject[k]);\n          }\n        } // for example, browserFS object\n\n      } else if (typeof aObject === "object") {\n        const keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\n        const objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["randId"])();\n\n        for (let k of keys) {\n          if (["hasOwnProperty", "constructor"].includes(k)) continue; // encode as interface\n\n          bObject[k] = await this._encode(aObject[k], k, bObject);\n        } // object id, used for dispose the object\n\n\n        bObject._rintf = objectId;\n      } else {\n        throw "imjoy-rpc: Unsupported data type:" + aObject;\n      }\n\n    if (transferables.length > 0) {\n      bObject.__transferables__ = transferables;\n    }\n\n    if (!bObject) {\n      throw new Error("Failed to encode object");\n    }\n\n    return bObject;\n  }\n\n  async _decode(aObject, withPromise) {\n    if (!aObject) {\n      return aObject;\n    }\n\n    let bObject;\n\n    if (aObject["_rtype"]) {\n      if (this._codecs[aObject._rtype] && this._codecs[aObject._rtype].decoder) {\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          aObject = await this._decode(aObject, withPromise);\n          aObject._rtype = temp;\n        }\n\n        bObject = await Promise.resolve(this._codecs[aObject._rtype].decoder(aObject));\n      } else if (aObject._rtype === "callback") {\n        bObject = this._genRemoteCallback(aObject._rtarget_id, aObject._rvalue, withPromise);\n      } else if (aObject._rtype === "interface") {\n        bObject = this._genRemoteMethod(aObject._rtarget_id, aObject._rvalue, aObject._rintf);\n      } else if (aObject._rtype === "ndarray") {\n        /*global nj tf*/\n        //create build array/tensor if used in the plugin\n        if (typeof nj !== "undefined" && nj.array) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          bObject = nj.array(new Uint8(aObject._rvalue), aObject._rdtype).reshape(aObject._rshape);\n        } else if (typeof tf !== "undefined" && tf.Tensor) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__["dtypeToTypedArray"][aObject._rdtype]);\n          bObject = tf.tensor(new arraytype(aObject._rvalue), aObject._rshape, aObject._rdtype);\n        } else {\n          //keep it as regular if transfered to the main app\n          bObject = aObject;\n        }\n      } else if (aObject._rtype === "error") {\n        bObject = new Error(aObject._rvalue);\n      } else if (aObject._rtype === "file") {\n        if (aObject._rvalue instanceof File) {\n          bObject = aObject._rvalue; //patch _path\n\n          bObject._path = aObject._rpath;\n        } else {\n          bObject = new File([aObject._rvalue], aObject._rname, {\n            type: aObject._rmime\n          });\n          bObject._path = aObject._rpath;\n        }\n      } else if (aObject._rtype === "typedarray") {\n        const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__["dtypeToTypedArray"][aObject._rdtype]);\n        if (!arraytype) throw new Error("unsupported dtype: " + aObject._rdtype);\n        bObject = new arraytype(aObject._rvalue);\n      } else if (aObject._rtype === "memoryview") {\n        bObject = new DataView(aObject._rvalue);\n      } else if (aObject._rtype === "blob") {\n        if (aObject._rvalue instanceof Blob) {\n          bObject = aObject._rvalue;\n        } else {\n          bObject = new Blob([aObject._rvalue], {\n            type: aObject._rmime\n          });\n        }\n      } else if (aObject._rtype === "orderedmap") {\n        bObject = new Map((await this._decode(aObject._rvalue, withPromise)));\n      } else if (aObject._rtype === "set") {\n        bObject = new Set((await this._decode(aObject._rvalue, withPromise)));\n      } else {\n        // make sure all the interface functions are decoded\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          aObject = await this._decode(aObject, withPromise);\n          aObject._rtype = temp;\n        }\n\n        bObject = aObject;\n      }\n    } else if (aObject.constructor === Object || Array.isArray(aObject)) {\n      const isarray = Array.isArray(aObject);\n      bObject = isarray ? [] : {};\n\n      for (let k of Object.keys(aObject)) {\n        if (isarray || aObject.hasOwnProperty(k)) {\n          const v = aObject[k];\n          bObject[k] = await this._decode(v, withPromise);\n        }\n      }\n    } else {\n      bObject = aObject;\n    }\n\n    if (bObject === undefined) {\n      throw new Error("Failed to decode object");\n    } // store the object id for dispose\n\n\n    if (aObject._rintf) {\n      this._object_weakmap.set(bObject, aObject._rintf);\n    }\n\n    return bObject;\n  }\n\n  async _wrap(args, asInterface) {\n    return await this._encode(args, asInterface);\n  }\n  /**\n   * Unwraps the set of arguments delivered from the remote site,\n   * replaces all callback identifiers with a function which will\n   * initiate sending that callback identifier back to other site\n   *\n   * @param {Object} args to unwrap\n   *\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Array} unwrapped args\n   */\n\n\n  async _unwrap(args, withPromise) {\n    return await this._decode(args, withPromise);\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * callback. When the generated function is called, it will send\n   * the corresponding message to the remote site asking it to\n   * execute the particular callback previously saved during a call\n   * by the remote site a method from the interface of this site\n   *\n   * @param {Number} id of the remote callback to execute\n   * @param {Number} argNum argument index of the callback\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Function} wrapped remote callback\n   */\n\n\n  _genRemoteCallback(targetId, cid, withPromise) {\n    const me = this;\n    let remoteCallback;\n\n    if (withPromise) {\n      remoteCallback = function () {\n        return new Promise(async (resolve, reject) => {\n          const args = await me._wrap(Array.prototype.slice.call(arguments));\n          const transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n          const encodedPromise = await me._wrap([resolve, reject]); // store the key id for removing them from the reference store together\n\n          resolve.__promise_pair = encodedPromise[1]._rvalue;\n          reject.__promise_pair = encodedPromise[0]._rvalue;\n\n          try {\n            me._connection.emit({\n              type: "callback",\n              target_id: targetId,\n              id: cid,\n              args: args,\n              promise: encodedPromise\n            }, transferables);\n          } catch (e) {\n            reject(`Failed to exectue remote callback ( id: ${cid}).`);\n          }\n        });\n      };\n\n      return remoteCallback;\n    } else {\n      remoteCallback = async function () {\n        const args = await me._wrap(Array.prototype.slice.call(arguments));\n        const transferables = args.__transferables__;\n        if (transferables) delete args.__transferables__;\n        return me._connection.emit({\n          type: "callback",\n          target_id: targetId,\n          id: cid,\n          args: args\n        }, transferables);\n      };\n\n      return remoteCallback;\n    }\n  }\n  /**\n   * Sends the notification message and breaks the connection\n   */\n\n\n  disconnect() {\n    this._connection.emit({\n      type: "disconnect"\n    });\n\n    setTimeout(() => {\n      this._connection.disconnect();\n    }, 2000);\n  }\n\n}\n/**\n * ReferenceStore is a special object which stores other objects\n * and provides the references (number) instead. This reference\n * may then be sent over a json-based communication channel (IPC\n * to another Node.js process or a message to the Worker). Other\n * site may then provide the reference in the responce message\n * implying the given object should be activated.\n *\n * Primary usage for the ReferenceStore is a storage for the\n * callbacks, which therefore makes it possible to initiate a\n * callback execution by the opposite site (which normally cannot\n * directly execute functions over the communication channel).\n *\n * Each stored object can only be fetched once and is not\n * available for the second time. Each stored object must be\n * fetched, since otherwise it will remain stored forever and\n * consume memory.\n *\n * Stored object indeces are simply the numbers, which are however\n * released along with the objects, and are later reused again (in\n * order to postpone the overflow, which should not likely happen,\n * but anyway).\n */\n\nclass ReferenceStore {\n  constructor() {\n    this._store = {}; // stored object\n\n    this._indices = [0]; // smallest available indices\n\n    this._readyHandler = function () {};\n\n    this._busyHandler = function () {};\n\n    this._readyHandler();\n  }\n  /**\n   * call handler when the store is empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onReady(readyHandler) {\n    this._readyHandler = readyHandler || function () {};\n  }\n  /**\n   * call handler when the store is not empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onBusy(busyHandler) {\n    this._busyHandler = busyHandler || function () {};\n  }\n  /**\n   * get the length of the store\n   *\n   */\n\n\n  getStack() {\n    return Object.keys(this._store).length;\n  }\n  /**\n   * @function _genId() generates the new reference id\n   *\n   * @returns {Number} smallest available id and reserves it\n   */\n\n\n  _genId() {\n    let id;\n\n    if (this._indices.length === 1) {\n      id = this._indices[0]++;\n    } else {\n      id = this._indices.shift();\n    }\n\n    return id;\n  }\n  /**\n   * Releases the given reference id so that it will be available by\n   * another object stored\n   *\n   * @param {Number} id to release\n   */\n\n\n  _releaseId(id) {\n    for (let i = 0; i < this._indices.length; i++) {\n      if (id < this._indices[i]) {\n        this._indices.splice(i, 0, id);\n\n        break;\n      }\n    } // cleaning-up the sequence tail\n\n\n    for (let i = this._indices.length - 1; i >= 0; i--) {\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\n        this._indices.pop();\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * Stores the given object and returns the refernce id instead\n   *\n   * @param {Object} obj to store\n   *\n   * @returns {Number} reference id of the stored object\n   */\n\n\n  put(obj) {\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\n      this._busyHandler();\n    }\n\n    const id = this._genId();\n\n    this._store[id] = obj;\n    return id;\n  }\n  /**\n   * Retrieves previously stored object and releases its reference\n   *\n   * @param {Number} id of an object to retrieve\n   */\n\n\n  fetch(id) {\n    const obj = this._store[id];\n\n    if (obj && !obj.__remote_method) {\n      delete this._store[id];\n\n      this._releaseId(id);\n\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\n        this._readyHandler();\n      }\n    }\n\n    if (obj && obj.__promise_pair) {\n      this.fetch(obj.__promise_pair);\n    }\n\n    return obj;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcnBjLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9zcmMvcnBjLmpzPzM1NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb250YWlucyB0aGUgUlBDIG9iamVjdCB1c2VkIGJvdGggYnkgdGhlIGFwcGxpY2F0aW9uXG4gKiBzaXRlLCBhbmQgYnkgZWFjaCBwbHVnaW5cbiAqL1xuaW1wb3J0IHtcbiAgcmFuZElkLFxuICB0eXBlZEFycmF5VG9EdHlwZSxcbiAgZHR5cGVUb1R5cGVkQXJyYXksXG4gIE1lc3NhZ2VFbWl0dGVyXG59IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBBUElfVkVSU0lPTiA9IFwiMC4yLjNcIjtcblxuY29uc3QgQXJyYXlCdWZmZXJWaWV3ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKFxuICBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IFVpbnQ4QXJyYXkoKSlcbikuY29uc3RydWN0b3I7XG5cbmZ1bmN0aW9uIF9hcHBlbmRCdWZmZXIoYnVmZmVyMSwgYnVmZmVyMikge1xuICBjb25zdCB0bXAgPSBuZXcgVWludDhBcnJheShidWZmZXIxLmJ5dGVMZW5ndGggKyBidWZmZXIyLmJ5dGVMZW5ndGgpO1xuICB0bXAuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlcjEpLCAwKTtcbiAgdG1wLnNldChuZXcgVWludDhBcnJheShidWZmZXIyKSwgYnVmZmVyMS5ieXRlTGVuZ3RoKTtcbiAgcmV0dXJuIHRtcC5idWZmZXI7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2JqZWN0KG9iaiwgaXMpIHtcbiAgaWYgKCFpcykgdGhyb3cgbmV3IEVycm9yKFwidW5kZWZpbmVkIGluZGV4XCIpO1xuICBpZiAodHlwZW9mIGlzID09PSBcInN0cmluZ1wiKSByZXR1cm4gaW5kZXhPYmplY3Qob2JqLCBpcy5zcGxpdChcIi5cIikpO1xuICBlbHNlIGlmIChpcy5sZW5ndGggPT09IDApIHJldHVybiBvYmo7XG4gIGVsc2UgcmV0dXJuIGluZGV4T2JqZWN0KG9ialtpc1swXV0sIGlzLnNsaWNlKDEpKTtcbn1cblxuLyoqXG4gKiBSUEMgb2JqZWN0IHJlcHJlc2VudHMgYSBzaW5nbGUgc2l0ZSBpbiB0aGVcbiAqIGNvbW11bmljYXRpb24gcHJvdG9jb2wgYmV0d2VlbiB0aGUgYXBwbGljYXRpb24gYW5kIHRoZSBwbHVnaW5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29ubmVjdGlvbiBhIHNwZWNpYWwgb2JqZWN0IGFsbG93aW5nIHRvIHNlbmRcbiAqIGFuZCByZWNlaXZlIG1lc3NhZ2VzIGZyb20gdGhlIG9wcG9zaXRlIHNpdGUgKGJhc2ljYWxseSBpdFxuICogc2hvdWxkIG9ubHkgcHJvdmlkZSBzZW5kKCkgYW5kIG9uTWVzc2FnZSgpIG1ldGhvZHMpXG4gKi9cbmV4cG9ydCBjbGFzcyBSUEMgZXh0ZW5kcyBNZXNzYWdlRW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKSB7XG4gICAgc3VwZXIoY29uZmlnICYmIGNvbmZpZy5kZWJ1Zyk7XG4gICAgdGhpcy5fY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fY29kZWNzID0gY29kZWNzIHx8IHt9O1xuICAgIHRoaXMuX29iamVjdF9zdG9yZSA9IHt9O1xuICAgIHRoaXMuX21ldGhvZF93ZWFrbWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICB0aGlzLl9vYmplY3Rfd2Vha21hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgdGhpcy5fbG9jYWxfYXBpID0gbnVsbDtcbiAgICAvLyBtYWtlIHN1cmUgdGhlcmUgaXMgYW4gZXhlY3V0ZSBmdW5jdGlvblxuICAgIGNvbnN0IG5hbWUgPSB0aGlzLmNvbmZpZy5uYW1lO1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24uZXhlY3V0ZSA9XG4gICAgICB0aGlzLl9jb25uZWN0aW9uLmV4ZWN1dGUgfHxcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbm5lY3Rpb24uZXhlY3V0ZSBub3QgaW1wbGVtZW50ZWQgKGluIFwiJHtuYW1lfVwiKWApO1xuICAgICAgfTtcbiAgICB0aGlzLl9zdG9yZSA9IG5ldyBSZWZlcmVuY2VTdG9yZSgpO1xuICAgIHRoaXMuX21ldGhvZF9yZWZzID0gbmV3IFJlZmVyZW5jZVN0b3JlKCk7XG4gICAgdGhpcy5fbWV0aG9kX3JlZnMub25SZWFkeSgoKSA9PiB7XG4gICAgICB0aGlzLl9maXJlKFwicmVtb3RlSWRsZVwiKTtcbiAgICB9KTtcbiAgICB0aGlzLl9tZXRob2RfcmVmcy5vbkJ1c3koKCkgPT4ge1xuICAgICAgdGhpcy5fZmlyZShcInJlbW90ZUJ1c3lcIik7XG4gICAgfSk7XG4gICAgdGhpcy5fc2V0dXBNZXNzYWdlSGFubGRlcnMoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5fY29ubmVjdGlvbi5lbWl0KHtcbiAgICAgIHR5cGU6IFwiaW5pdGlhbGl6ZWRcIixcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBwZWVyX2lkOiB0aGlzLl9jb25uZWN0aW9uLnBlZXJfaWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2V0IGEgaGFuZGxlciB0byBiZSBjYWxsZWQgd2hlbiByZWNlaXZlZCBhIHJlc3BvbmNlIGZyb20gdGhlXG4gICAqIHJlbW90ZSBzaXRlIHJlcG9ydGluZyB0aGF0IHRoZSBwcmV2aW91c2x5IHByb3ZpZGVkIGludGVyZmFjZVxuICAgKiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc2V0IGFzIHJlbW90ZSBmb3IgdGhhdCBzaXRlXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG5cbiAgZ2V0UmVtb3RlQ2FsbFN0YWNrKCkge1xuICAgIHJldHVybiB0aGlzLl9tZXRob2RfcmVmcy5nZXRTdGFjaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHNldCBvZiByZW1vdGUgaW50ZXJmYWNlIG1ldGhvZHNcbiAgICovXG4gIGdldFJlbW90ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVtb3RlX2ludGVyZmFjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBpbnRlcmZhY2Ugb2YgdGhpcyBzaXRlIG1ha2luZyBpdCBhdmFpbGFibGUgdG8gdGhlXG4gICAqIHJlbW90ZSBzaXRlIGJ5IHNlbmRpbmcgYSBtZXNzYWdlIHdpdGggYSBzZXQgb2YgbWV0aG9kcyBuYW1lc1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gX2ludGVyZmFjZSB0byBzZXRcbiAgICovXG4gIHNldEludGVyZmFjZShfaW50ZXJmYWNlLCBjb25maWcpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5jb25maWcubmFtZSA9IGNvbmZpZy5uYW1lIHx8IHRoaXMuY29uZmlnLm5hbWU7XG4gICAgdGhpcy5jb25maWcuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb24gfHwgdGhpcy5jb25maWcuZGVzY3JpcHRpb247XG4gICAgaWYgKHRoaXMuY29uZmlnLmZvcndhcmRpbmdfZnVuY3Rpb25zKSB7XG4gICAgICBmb3IgKGxldCBmdW5jX25hbWUgb2YgdGhpcy5jb25maWcuZm9yd2FyZGluZ19mdW5jdGlvbnMpIHtcbiAgICAgICAgY29uc3QgX3JlbW90ZSA9IHRoaXMuX3JlbW90ZV9pbnRlcmZhY2U7XG4gICAgICAgIGlmIChfcmVtb3RlW2Z1bmNfbmFtZV0pIHtcbiAgICAgICAgICBpZiAoX2ludGVyZmFjZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoIV9pbnRlcmZhY2VbZnVuY19uYW1lXSkge1xuICAgICAgICAgICAgICBfaW50ZXJmYWNlW2Z1bmNfbmFtZV0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIF9yZW1vdGVbZnVuY19uYW1lXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKF9pbnRlcmZhY2UuY29uc3RydWN0b3IuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoIV9pbnRlcmZhY2UuY29uc3RydWN0b3IucHJvdG90eXBlW2Z1bmNfbmFtZV0pIHtcbiAgICAgICAgICAgICAgX2ludGVyZmFjZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbZnVuY19uYW1lXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgX3JlbW90ZVtmdW5jX25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9sb2NhbF9hcGkgPSBfaW50ZXJmYWNlO1xuICAgIHRoaXMuX2ZpcmUoXCJpbnRlcmZhY2VBdmFpbGFibGVcIik7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIGFjdHVhbCBpbnRlcmZhY2UgdG8gdGhlIHJlbW90ZSBzaXRlIHVwb24gaXQgd2FzXG4gICAqIHVwZGF0ZWQgb3IgYnkgYSBzcGVjaWFsIHJlcXVlc3Qgb2YgdGhlIHJlbW90ZSBzaXRlXG4gICAqL1xuICBzZW5kSW50ZXJmYWNlKCkge1xuICAgIGlmICghdGhpcy5fbG9jYWxfYXBpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnRlcmZhY2UgaXMgbm90IHNldC5cIik7XG4gICAgfVxuICAgIHRoaXMuX2VuY29kZSh0aGlzLl9sb2NhbF9hcGksIHRydWUpLnRoZW4oYXBpID0+IHtcbiAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7IHR5cGU6IFwic2V0SW50ZXJmYWNlXCIsIGFwaTogYXBpIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2Rpc3Bvc2VPYmplY3Qob2JqZWN0SWQpIHtcbiAgICBpZiAodGhpcy5fb2JqZWN0X3N0b3JlW29iamVjdElkXSkge1xuICAgICAgZGVsZXRlIHRoaXMuX29iamVjdF9zdG9yZVtvYmplY3RJZF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgT2JqZWN0IChpZD0ke29iamVjdElkfSkgbm90IGZvdW5kLmApO1xuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2VPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLl9vYmplY3Rfd2Vha21hcC5oYXMob2JqKSkge1xuICAgICAgICBjb25zdCBvYmplY3RJZCA9IHRoaXMuX29iamVjdF93ZWFrbWFwLmdldChvYmopO1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLm9uY2UoXCJkaXNwb3NlZFwiLCBkYXRhID0+IHtcbiAgICAgICAgICBpZiAoZGF0YS5lcnJvcikgcmVqZWN0KG5ldyBFcnJvcihkYXRhLmVycm9yKSk7XG4gICAgICAgICAgZWxzZSByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoe1xuICAgICAgICAgIHR5cGU6IFwiZGlzcG9zZU9iamVjdFwiLFxuICAgICAgICAgIG9iamVjdF9pZDogb2JqZWN0SWRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9iamVjdFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGEgbWVzc2FnZSBmcm9tIHRoZSByZW1vdGUgc2l0ZVxuICAgKi9cbiAgX3NldHVwTWVzc2FnZUhhbmxkZXJzKCkge1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXCJpbml0XCIsIHRoaXMuaW5pdCk7XG4gICAgdGhpcy5fY29ubmVjdGlvbi5vbihcImV4ZWN1dGVcIiwgZGF0YSA9PiB7XG4gICAgICBQcm9taXNlLnJlc29sdmUodGhpcy5fY29ubmVjdGlvbi5leGVjdXRlKGRhdGEuY29kZSkpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoeyB0eXBlOiBcImV4ZWN1dGVkXCIgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7XG4gICAgICAgICAgICB0eXBlOiBcImV4ZWN1dGVkXCIsXG4gICAgICAgICAgICBlcnJvcjogU3RyaW5nKGUpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fY29ubmVjdGlvbi5vbihcIm1ldGhvZFwiLCBhc3luYyBkYXRhID0+IHtcbiAgICAgIGxldCByZXNvbHZlLCByZWplY3QsIG1ldGhvZCwgbWV0aG9kX3RoaXMsIGFyZ3MsIHJlc3VsdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChkYXRhLnByb21pc2UpIHtcbiAgICAgICAgICBbcmVzb2x2ZSwgcmVqZWN0XSA9IGF3YWl0IHRoaXMuX3Vud3JhcChkYXRhLnByb21pc2UsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfaW50ZXJmYWNlID0gdGhpcy5fb2JqZWN0X3N0b3JlW2RhdGEub2JqZWN0X2lkXTtcbiAgICAgICAgbWV0aG9kID0gaW5kZXhPYmplY3QoX2ludGVyZmFjZSwgZGF0YS5uYW1lKTtcbiAgICAgICAgaWYgKGRhdGEubmFtZS5pbmNsdWRlcyhcIi5cIikpIHtcbiAgICAgICAgICBjb25zdCB0bXAgPSBkYXRhLm5hbWUuc3BsaXQoXCIuXCIpO1xuICAgICAgICAgIGNvbnN0IGludGZfaW5kZXggPSB0bXAuc2xpY2UoMCwgdG1wLmxlbmd0aCAtIDEpLmpvaW4oXCIuXCIpO1xuICAgICAgICAgIG1ldGhvZF90aGlzID0gaW5kZXhPYmplY3QoX2ludGVyZmFjZSwgaW50Zl9pbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWV0aG9kX3RoaXMgPSBfaW50ZXJmYWNlO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MgPSBhd2FpdCB0aGlzLl91bndyYXAoZGF0YS5hcmdzLCB0cnVlKTtcbiAgICAgICAgaWYgKGRhdGEucHJvbWlzZSkge1xuICAgICAgICAgIHJlc3VsdCA9IG1ldGhvZC5hcHBseShtZXRob2RfdGhpcywgYXJncyk7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSB8fFxuICAgICAgICAgICAgKG1ldGhvZC5jb25zdHJ1Y3RvciAmJiBtZXRob2QuY29uc3RydWN0b3IubmFtZSA9PT0gXCJBc3luY0Z1bmN0aW9uXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXN1bHQudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1ldGhvZC5hcHBseShtZXRob2RfdGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKHRoaXMuY29uZmlnLm5hbWUsIGVycik7XG4gICAgICAgIGlmIChyZWplY3QpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fY29ubmVjdGlvbi5vbihcImNhbGxiYWNrXCIsIGFzeW5jIGRhdGEgPT4ge1xuICAgICAgbGV0IHJlc29sdmUsIHJlamVjdCwgbWV0aG9kLCBhcmdzLCByZXN1bHQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZGF0YS5wcm9taXNlKSB7XG4gICAgICAgICAgW3Jlc29sdmUsIHJlamVjdF0gPSBhd2FpdCB0aGlzLl91bndyYXAoZGF0YS5wcm9taXNlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEucHJvbWlzZSkge1xuICAgICAgICAgIG1ldGhvZCA9IHRoaXMuX3N0b3JlLmZldGNoKGRhdGEuaWQpO1xuICAgICAgICAgIGFyZ3MgPSBhd2FpdCB0aGlzLl91bndyYXAoZGF0YS5hcmdzLCB0cnVlKTtcbiAgICAgICAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBcIkNhbGxiYWNrIGZ1bmN0aW9uIGNhbiBvbmx5IGNhbGxlZCBvbmNlLCBpZiB5b3Ugd2FudCB0byBjYWxsIGEgZnVuY3Rpb24gZm9yIG11bHRpcGxlIHRpbWVzLCBwbGVhc2UgbWFrZSBpdCBhcyBhIHBsdWdpbiBhcGkgZnVuY3Rpb24uIFNlZSBodHRwczovL2ltam95LmlvL2RvY3MgZm9yIG1vcmUgZGV0YWlscy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gbWV0aG9kLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UgfHxcbiAgICAgICAgICAgIChtZXRob2QuY29uc3RydWN0b3IgJiYgbWV0aG9kLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQXN5bmNGdW5jdGlvblwiKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmVzdWx0LnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXRob2QgPSB0aGlzLl9zdG9yZS5mZXRjaChkYXRhLmlkKTtcbiAgICAgICAgICBhcmdzID0gYXdhaXQgdGhpcy5fdW53cmFwKGRhdGEuYXJncywgdHJ1ZSk7XG4gICAgICAgICAgaWYgKCFtZXRob2QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgXCJQbGVhc2Ugbm90aWNlIHRoYXQgY2FsbGJhY2sgZnVuY3Rpb24gY2FuIG9ubHkgY2FsbGVkIG9uY2UsIGlmIHlvdSB3YW50IHRvIGNhbGwgYSBmdW5jdGlvbiBmb3IgbXVsdGlwbGUgdGltZXMsIHBsZWFzZSBtYWtlIGl0IGFzIGEgcGx1Z2luIGFwaSBmdW5jdGlvbi4gU2VlIGh0dHBzOi8vaW1qb3kuaW8vZG9jcyBmb3IgbW9yZSBkZXRhaWxzLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRob2QuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKHRoaXMuY29uZmlnLm5hbWUsIGVycik7XG4gICAgICAgIGlmIChyZWplY3QpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXCJkaXNwb3NlT2JqZWN0XCIsIGRhdGEgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fZGlzcG9zZU9iamVjdChkYXRhLm9iamVjdF9pZCk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7XG4gICAgICAgICAgdHlwZTogXCJkaXNwb3NlZFwiXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoe1xuICAgICAgICAgIHR5cGU6IFwiZGlzcG9zZWRcIixcbiAgICAgICAgICBlcnJvcjogU3RyaW5nKGUpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXCJzZXRJbnRlcmZhY2VcIiwgZGF0YSA9PiB7XG4gICAgICB0aGlzLl9zZXRSZW1vdGVJbnRlcmZhY2UoZGF0YS5hcGkpO1xuICAgIH0pO1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXCJnZXRJbnRlcmZhY2VcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fZmlyZShcImdldEludGVyZmFjZVwiKTtcbiAgICAgIGlmICh0aGlzLl9sb2NhbF9hcGkpIHtcbiAgICAgICAgdGhpcy5zZW5kSW50ZXJmYWNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uY2UoXCJpbnRlcmZhY2VBdmFpbGFibGVcIiwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2VuZEludGVyZmFjZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9jb25uZWN0aW9uLm9uKFwiaW50ZXJmYWNlU2V0QXNSZW1vdGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fZmlyZShcImludGVyZmFjZVNldEFzUmVtb3RlXCIpO1xuICAgIH0pO1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXCJkaXNjb25uZWN0XCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2ZpcmUoXCJiZWZvcmVEaXNjb25uZWN0XCIpO1xuICAgICAgdGhpcy5fY29ubmVjdGlvbi5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLl9maXJlKFwiZGlzY29ubmVjdGVkXCIpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgcmVxdWVzdHMgdG8gdGhlIHJlbW90ZSBzaXRlIGFza2luZyBpdCB0byBwcm92aWRlIGl0c1xuICAgKiBjdXJyZW50IGludGVyZmFjZVxuICAgKi9cbiAgcmVxdWVzdFJlbW90ZSgpIHtcbiAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoeyB0eXBlOiBcImdldEludGVyZmFjZVwiIH0pO1xuICB9XG5cbiAgX25kYXJyYXkodHlwZWRBcnJheSwgc2hhcGUsIGR0eXBlKSB7XG4gICAgY29uc3QgX2R0eXBlID0gdHlwZWRBcnJheVRvRHR5cGVbdHlwZWRBcnJheS5jb25zdHJ1Y3Rvci5uYW1lXTtcbiAgICBpZiAoZHR5cGUgJiYgZHR5cGUgIT09IF9kdHlwZSkge1xuICAgICAgdGhyb3cgXCJkdHlwZSBkb2Vzbid0IG1hdGNoIHRoZSB0eXBlIG9mIHRoZSBhcnJheTogXCIgK1xuICAgICAgICBfZHR5cGUgK1xuICAgICAgICBcIiAhPSBcIiArXG4gICAgICAgIGR0eXBlO1xuICAgIH1cbiAgICBzaGFwZSA9IHNoYXBlIHx8IFt0eXBlZEFycmF5Lmxlbmd0aF07XG4gICAgcmV0dXJuIHtcbiAgICAgIF9ydHlwZTogXCJuZGFycmF5XCIsXG4gICAgICBfcnZhbHVlOiB0eXBlZEFycmF5LmJ1ZmZlcixcbiAgICAgIF9yc2hhcGU6IHNoYXBlLFxuICAgICAgX3JkdHlwZTogX2R0eXBlXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBuZXcgcmVtb3RlIGludGVyZmFjZSBwcm92aWRlZCBieSB0aGUgb3RoZXIgc2l0ZVxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBuYW1lcyBsaXN0IG9mIGZ1bmN0aW9uIG5hbWVzXG4gICAqL1xuICBfc2V0UmVtb3RlSW50ZXJmYWNlKGFwaSkge1xuICAgIHRoaXMuX2RlY29kZShhcGkpLnRoZW4oaW50ZiA9PiB7XG4gICAgICB0aGlzLl9yZW1vdGVfaW50ZXJmYWNlID0gaW50ZjtcbiAgICAgIHRoaXMuX2ZpcmUoXCJyZW1vdGVSZWFkeVwiKTtcbiAgICAgIHRoaXMuX3JlcG9ydFJlbW90ZVNldCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB0aGUgd3JhcHBlZCBmdW5jdGlvbiBjb3JyZXNwb25kaW5nIHRvIGEgc2luZ2xlIHJlbW90ZVxuICAgKiBtZXRob2QuIFdoZW4gdGhlIGdlbmVyYXRlZCBmdW5jdGlvbiBpcyBjYWxsZWQsIGl0IHdpbGwgc2VuZCB0aGVcbiAgICogY29ycmVzcG9uZGluZyBtZXNzYWdlIHRvIHRoZSByZW1vdGUgc2l0ZSBhc2tpbmcgaXQgdG8gZXhlY3V0ZVxuICAgKiB0aGUgcGFydGljdWxhciBtZXRob2Qgb2YgaXRzIGludGVyZmFjZVxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiB0aGUgcmVtb3RlIG1ldGhvZFxuICAgKlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IHdyYXBwZWQgcmVtb3RlIG1ldGhvZFxuICAgKi9cbiAgX2dlblJlbW90ZU1ldGhvZCh0YXJnZXRJZCwgbmFtZSwgb2JqZWN0SWQpIHtcbiAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgY29uc3QgcmVtb3RlTWV0aG9kID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgaWQgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlkID0gbWUuX21ldGhvZF9yZWZzLnB1dChvYmplY3RJZCA/IG9iamVjdElkICsgXCIvXCIgKyBuYW1lIDogbmFtZSk7XG4gICAgICAgICAgY29uc3Qgd3JhcHBlZF9yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaWQgIT09IG51bGwpIG1lLl9tZXRob2RfcmVmcy5mZXRjaChpZCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgY29uc3Qgd3JhcHBlZF9yZWplY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpZCAhPT0gbnVsbCkgbWUuX21ldGhvZF9yZWZzLmZldGNoKGlkKTtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgZW5jb2RlZFByb21pc2UgPSBhd2FpdCBtZS5fd3JhcChbXG4gICAgICAgICAgICB3cmFwcGVkX3Jlc29sdmUsXG4gICAgICAgICAgICB3cmFwcGVkX3JlamVjdFxuICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgLy8gc3RvcmUgdGhlIGtleSBpZCBmb3IgcmVtb3ZpbmcgdGhlbSBmcm9tIHRoZSByZWZlcmVuY2Ugc3RvcmUgdG9nZXRoZXJcbiAgICAgICAgICB3cmFwcGVkX3Jlc29sdmUuX19wcm9taXNlX3BhaXIgPSBlbmNvZGVkUHJvbWlzZVsxXS5fcnZhbHVlO1xuICAgICAgICAgIHdyYXBwZWRfcmVqZWN0Ll9fcHJvbWlzZV9wYWlyID0gZW5jb2RlZFByb21pc2VbMF0uX3J2YWx1ZTtcblxuICAgICAgICAgIGxldCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gXCJyZWdpc3RlclwiIHx8IG5hbWUgPT09IFwiZXhwb3J0XCIgfHwgbmFtZSA9PT0gXCJvblwiKSB7XG4gICAgICAgICAgICBhcmdzID0gYXdhaXQgbWUuX3dyYXAoYXJncywgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3MgPSBhd2FpdCBtZS5fd3JhcChhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdHJhbnNmZXJhYmxlcyA9IGFyZ3MuX190cmFuc2ZlcmFibGVzX187XG4gICAgICAgICAgaWYgKHRyYW5zZmVyYWJsZXMpIGRlbGV0ZSBhcmdzLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgICAgICAgIG1lLl9jb25uZWN0aW9uLmVtaXQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6IFwibWV0aG9kXCIsXG4gICAgICAgICAgICAgIHRhcmdldF9pZDogdGFyZ2V0SWQsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIG9iamVjdF9pZDogb2JqZWN0SWQsXG4gICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgIHByb21pc2U6IGVuY29kZWRQcm9taXNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNmZXJhYmxlc1xuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoaWQpIG1lLl9tZXRob2RfcmVmcy5mZXRjaChpZCk7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgYEZhaWxlZCB0byBleGVjdHVlIHJlbW90ZSBtZXRob2QgKGludGVyZmFjZTogJHtvYmplY3RJZCB8fFxuICAgICAgICAgICAgICBtZS5pZH0sIG1ldGhvZDogJHtuYW1lfSksIGVycm9yOiAke2V9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmVtb3RlTWV0aG9kLl9fcmVtb3RlX21ldGhvZCA9IHRydWU7XG4gICAgcmV0dXJuIHJlbW90ZU1ldGhvZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIHJlc3BvbmNlIHJlcG9ydGluZyB0aGF0IGludGVyZmFjZSBqdXN0IHByb3ZpZGVkIGJ5IHRoZVxuICAgKiByZW1vdGUgc2l0ZSB3YXMgc3VjY2Vzc2Z1bGx5IHNldCBieSB0aGlzIHNpdGUgYXMgcmVtb3RlXG4gICAqL1xuICBfcmVwb3J0UmVtb3RlU2V0KCkge1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7IHR5cGU6IFwiaW50ZXJmYWNlU2V0QXNSZW1vdGVcIiB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlcyB0aGUgcHJvdmlkZWQgc2V0IG9mIHJlbW90ZSBtZXRob2QgYXJndW1lbnRzIGZvclxuICAgKiBzZW5kaW5nIHRvIHRoZSByZW1vdGUgc2l0ZSwgcmVwbGFjZXMgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aFxuICAgKiBpZGVudGlmaWVyc1xuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIHRvIHdyYXBcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fSB3cmFwcGVkIGFyZ3VtZW50c1xuICAgKi9cbiAgYXN5bmMgX2VuY29kZShhT2JqZWN0LCBhc0ludGVyZmFjZSwgb2JqZWN0SWQpIHtcbiAgICBjb25zdCBhVHlwZSA9IHR5cGVvZiBhT2JqZWN0O1xuICAgIGlmIChcbiAgICAgIGFUeXBlID09PSBcIm51bWJlclwiIHx8XG4gICAgICBhVHlwZSA9PT0gXCJzdHJpbmdcIiB8fFxuICAgICAgYVR5cGUgPT09IFwiYm9vbGVhblwiIHx8XG4gICAgICBhT2JqZWN0ID09PSBudWxsIHx8XG4gICAgICBhT2JqZWN0ID09PSB1bmRlZmluZWQgfHxcbiAgICAgIGFPYmplY3QgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlclxuICAgICkge1xuICAgICAgcmV0dXJuIGFPYmplY3Q7XG4gICAgfVxuXG4gICAgbGV0IGJPYmplY3Q7XG4gICAgaWYgKHR5cGVvZiBhT2JqZWN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmIChhc0ludGVyZmFjZSkge1xuICAgICAgICBpZiAoIW9iamVjdElkKSB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3RJZCBpcyBub3Qgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgYk9iamVjdCA9IHtcbiAgICAgICAgICBfcnR5cGU6IFwiaW50ZXJmYWNlXCIsXG4gICAgICAgICAgX3J0YXJnZXRfaWQ6IHRoaXMuX2Nvbm5lY3Rpb24ucGVlcl9pZCxcbiAgICAgICAgICBfcmludGY6IG9iamVjdElkLFxuICAgICAgICAgIF9ydmFsdWU6IGFzSW50ZXJmYWNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX21ldGhvZF93ZWFrbWFwLnNldChhT2JqZWN0LCBiT2JqZWN0KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fbWV0aG9kX3dlYWttYXAuaGFzKGFPYmplY3QpKSB7XG4gICAgICAgIGJPYmplY3QgPSB0aGlzLl9tZXRob2Rfd2Vha21hcC5nZXQoYU9iamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjaWQgPSB0aGlzLl9zdG9yZS5wdXQoYU9iamVjdCk7XG4gICAgICAgIGJPYmplY3QgPSB7XG4gICAgICAgICAgX3J0eXBlOiBcImNhbGxiYWNrXCIsXG4gICAgICAgICAgX3J0YXJnZXRfaWQ6IHRoaXMuX2Nvbm5lY3Rpb24ucGVlcl9pZCxcbiAgICAgICAgICBfcm5hbWU6IChhT2JqZWN0LmNvbnN0cnVjdG9yICYmIGFPYmplY3QuY29uc3RydWN0b3IubmFtZSkgfHwgY2lkLFxuICAgICAgICAgIF9ydmFsdWU6IGNpZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJPYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gc2tpcCBpZiBhbHJlYWR5IGVuY29kZWRcbiAgICBpZiAoYU9iamVjdC5jb25zdHJ1Y3RvciBpbnN0YW5jZW9mIE9iamVjdCAmJiBhT2JqZWN0Ll9ydHlwZSkge1xuICAgICAgLy8gbWFrZSBzdXJlIHRoZSBpbnRlcmZhY2UgZnVuY3Rpb25zIGFyZSBlbmNvZGVkXG4gICAgICBpZiAoYU9iamVjdC5fcmludGYpIHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGFPYmplY3QuX3J0eXBlO1xuICAgICAgICBkZWxldGUgYU9iamVjdC5fcnR5cGU7XG5cbiAgICAgICAgYk9iamVjdCA9IGF3YWl0IHRoaXMuX2VuY29kZShhT2JqZWN0LCBhc0ludGVyZmFjZSwgb2JqZWN0SWQpO1xuICAgICAgICBiT2JqZWN0Ll9ydHlwZSA9IHRlbXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiT2JqZWN0ID0gYU9iamVjdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiT2JqZWN0O1xuICAgIH1cblxuICAgIGNvbnN0IHRyYW5zZmVyYWJsZXMgPSBbXTtcbiAgICBjb25zdCBfdHJhbnNmZXIgPSBhT2JqZWN0Ll90cmFuc2ZlcjtcbiAgICBjb25zdCBpc2FycmF5ID0gQXJyYXkuaXNBcnJheShhT2JqZWN0KTtcblxuICAgIGZvciAobGV0IHRwIG9mIE9iamVjdC5rZXlzKHRoaXMuX2NvZGVjcykpIHtcbiAgICAgIGNvbnN0IGNvZGVjID0gdGhpcy5fY29kZWNzW3RwXTtcbiAgICAgIGlmIChjb2RlYy5lbmNvZGVyICYmIGFPYmplY3QgaW5zdGFuY2VvZiBjb2RlYy50eXBlKSB7XG4gICAgICAgIC8vIFRPRE86IHdoYXQgaWYgbXVsdGlwbGUgZW5jb2RlcnMgZm91bmRcbiAgICAgICAgbGV0IGVuY29kZWRPYmogPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoY29kZWMuZW5jb2RlcihhT2JqZWN0KSk7XG4gICAgICAgIGlmIChlbmNvZGVkT2JqICYmICFlbmNvZGVkT2JqLl9ydHlwZSkgZW5jb2RlZE9iai5fcnR5cGUgPSBjb2RlYy5uYW1lO1xuICAgICAgICAvLyBlbmNvZGUgdGhlIGZ1bmN0aW9ucyBpbiB0aGUgaW50ZXJmYWNlIG9iamVjdFxuICAgICAgICBpZiAoZW5jb2RlZE9iaiAmJiBlbmNvZGVkT2JqLl9yaW50Zikge1xuICAgICAgICAgIGNvbnN0IHRlbXAgPSBlbmNvZGVkT2JqLl9ydHlwZTtcbiAgICAgICAgICBkZWxldGUgZW5jb2RlZE9iai5fcnR5cGU7XG4gICAgICAgICAgZW5jb2RlZE9iaiA9IGF3YWl0IHRoaXMuX2VuY29kZShlbmNvZGVkT2JqLCBhc0ludGVyZmFjZSwgb2JqZWN0SWQpO1xuICAgICAgICAgIGVuY29kZWRPYmouX3J0eXBlID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgICBiT2JqZWN0ID0gZW5jb2RlZE9iajtcbiAgICAgICAgcmV0dXJuIGJPYmplY3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgLypnbG9iYWwgdGYqL1xuICAgICAgdHlwZW9mIHRmICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICB0Zi5UZW5zb3IgJiZcbiAgICAgIGFPYmplY3QgaW5zdGFuY2VvZiB0Zi5UZW5zb3JcbiAgICApIHtcbiAgICAgIGNvbnN0IHZfYnVmZmVyID0gYU9iamVjdC5kYXRhU3luYygpO1xuICAgICAgaWYgKGFPYmplY3QuX3RyYW5zZmVyIHx8IF90cmFuc2Zlcikge1xuICAgICAgICB0cmFuc2ZlcmFibGVzLnB1c2godl9idWZmZXIuYnVmZmVyKTtcbiAgICAgICAgZGVsZXRlIGFPYmplY3QuX3RyYW5zZmVyO1xuICAgICAgfVxuICAgICAgYk9iamVjdCA9IHtcbiAgICAgICAgX3J0eXBlOiBcIm5kYXJyYXlcIixcbiAgICAgICAgX3J2YWx1ZTogdl9idWZmZXIuYnVmZmVyLFxuICAgICAgICBfcnNoYXBlOiBhT2JqZWN0LnNoYXBlLFxuICAgICAgICBfcmR0eXBlOiBhT2JqZWN0LmR0eXBlXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvKmdsb2JhbCBuaiovXG4gICAgICB0eXBlb2YgbmogIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgIG5qLk5kQXJyYXkgJiZcbiAgICAgIGFPYmplY3QgaW5zdGFuY2VvZiBuai5OZEFycmF5XG4gICAgKSB7XG4gICAgICBjb25zdCBkdHlwZSA9IHR5cGVkQXJyYXlUb0R0eXBlW2FPYmplY3Quc2VsZWN0aW9uLmRhdGEuY29uc3RydWN0b3IubmFtZV07XG4gICAgICBpZiAoYU9iamVjdC5fdHJhbnNmZXIgfHwgX3RyYW5zZmVyKSB7XG4gICAgICAgIHRyYW5zZmVyYWJsZXMucHVzaChhT2JqZWN0LnNlbGVjdGlvbi5kYXRhLmJ1ZmZlcik7XG4gICAgICAgIGRlbGV0ZSBhT2JqZWN0Ll90cmFuc2ZlcjtcbiAgICAgIH1cbiAgICAgIGJPYmplY3QgPSB7XG4gICAgICAgIF9ydHlwZTogXCJuZGFycmF5XCIsXG4gICAgICAgIF9ydmFsdWU6IGFPYmplY3Quc2VsZWN0aW9uLmRhdGEuYnVmZmVyLFxuICAgICAgICBfcnNoYXBlOiBhT2JqZWN0LnNoYXBlLFxuICAgICAgICBfcmR0eXBlOiBkdHlwZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFPYmplY3QgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihhT2JqZWN0KTtcbiAgICAgIGJPYmplY3QgPSB7IF9ydHlwZTogXCJlcnJvclwiLCBfcnZhbHVlOiBhT2JqZWN0LnRvU3RyaW5nKCkgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBGaWxlICE9PSBcInVuZGVmaW5lZFwiICYmIGFPYmplY3QgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICBiT2JqZWN0ID0ge1xuICAgICAgICBfcnR5cGU6IFwiZmlsZVwiLFxuICAgICAgICBfcnZhbHVlOiBhT2JqZWN0LFxuICAgICAgICBfcnBhdGg6IGFPYmplY3QuX3BhdGggfHwgYU9iamVjdC53ZWJraXRSZWxhdGl2ZVBhdGhcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIHNlbmQgb2JqZWN0cyBzdXBwb3J0ZWQgYnkgc3RydWN0dXJlIGNsb25lIGFsZ29yaXRobVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJfV29ya2Vyc19BUEkvU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG1cbiAgICBlbHNlIGlmIChcbiAgICAgIGFPYmplY3QgIT09IE9iamVjdChhT2JqZWN0KSB8fFxuICAgICAgYU9iamVjdCBpbnN0YW5jZW9mIEJvb2xlYW4gfHxcbiAgICAgIGFPYmplY3QgaW5zdGFuY2VvZiBTdHJpbmcgfHxcbiAgICAgIGFPYmplY3QgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICBhT2JqZWN0IGluc3RhbmNlb2YgUmVnRXhwIHx8XG4gICAgICBhT2JqZWN0IGluc3RhbmNlb2YgSW1hZ2VEYXRhIHx8XG4gICAgICAodHlwZW9mIEZpbGVMaXN0ICE9PSBcInVuZGVmaW5lZFwiICYmIGFPYmplY3QgaW5zdGFuY2VvZiBGaWxlTGlzdClcbiAgICApIHtcbiAgICAgIGJPYmplY3QgPSBhT2JqZWN0O1xuICAgICAgLy8gVE9ETzogYXZvaWQgb2JqZWN0IHN1Y2ggYXMgRHluYW1pY1BsdWdpbiBpbnN0YW5jZS5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBGaWxlICE9PSBcInVuZGVmaW5lZFwiICYmIGFPYmplY3QgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICBiT2JqZWN0ID0ge1xuICAgICAgICBfcnR5cGU6IFwiZmlsZVwiLFxuICAgICAgICBfcm5hbWU6IGFPYmplY3QubmFtZSxcbiAgICAgICAgX3JtaW1lOiBhT2JqZWN0LnR5cGUsXG4gICAgICAgIF9ydmFsdWU6IGFPYmplY3QsXG4gICAgICAgIF9ycGF0aDogYU9iamVjdC5fcGF0aCB8fCBhT2JqZWN0LndlYmtpdFJlbGF0aXZlUGF0aFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFPYmplY3QgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICBiT2JqZWN0ID0geyBfcnR5cGU6IFwiYmxvYlwiLCBfcnZhbHVlOiBhT2JqZWN0IH07XG4gICAgfSBlbHNlIGlmIChhT2JqZWN0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXJWaWV3KSB7XG4gICAgICBpZiAoYU9iamVjdC5fdHJhbnNmZXIgfHwgX3RyYW5zZmVyKSB7XG4gICAgICAgIHRyYW5zZmVyYWJsZXMucHVzaChhT2JqZWN0LmJ1ZmZlcik7XG4gICAgICAgIGRlbGV0ZSBhT2JqZWN0Ll90cmFuc2ZlcjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGR0eXBlID0gdHlwZWRBcnJheVRvRHR5cGVbYU9iamVjdC5jb25zdHJ1Y3Rvci5uYW1lXTtcbiAgICAgIGJPYmplY3QgPSB7XG4gICAgICAgIF9ydHlwZTogXCJ0eXBlZGFycmF5XCIsXG4gICAgICAgIF9ydmFsdWU6IGFPYmplY3QuYnVmZmVyLFxuICAgICAgICBfcmR0eXBlOiBkdHlwZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFPYmplY3QgaW5zdGFuY2VvZiBEYXRhVmlldykge1xuICAgICAgaWYgKGFPYmplY3QuX3RyYW5zZmVyIHx8IF90cmFuc2Zlcikge1xuICAgICAgICB0cmFuc2ZlcmFibGVzLnB1c2goYU9iamVjdC5idWZmZXIpO1xuICAgICAgICBkZWxldGUgYU9iamVjdC5fdHJhbnNmZXI7XG4gICAgICB9XG4gICAgICBiT2JqZWN0ID0geyBfcnR5cGU6IFwibWVtb3J5dmlld1wiLCBfcnZhbHVlOiBhT2JqZWN0LmJ1ZmZlciB9O1xuICAgIH0gZWxzZSBpZiAoYU9iamVjdCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgYk9iamVjdCA9IHtcbiAgICAgICAgX3J0eXBlOiBcInNldFwiLFxuICAgICAgICBfcnZhbHVlOiBhd2FpdCB0aGlzLl9lbmNvZGUoQXJyYXkuZnJvbShhT2JqZWN0KSwgYXNJbnRlcmZhY2UpXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoYU9iamVjdCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgYk9iamVjdCA9IHtcbiAgICAgICAgX3J0eXBlOiBcIm9yZGVyZWRtYXBcIixcbiAgICAgICAgX3J2YWx1ZTogYXdhaXQgdGhpcy5fZW5jb2RlKEFycmF5LmZyb20oYU9iamVjdCksIGFzSW50ZXJmYWNlKVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYU9iamVjdC5jb25zdHJ1Y3RvciBpbnN0YW5jZW9mIE9iamVjdCB8fFxuICAgICAgQXJyYXkuaXNBcnJheShhT2JqZWN0KVxuICAgICkge1xuICAgICAgYk9iamVjdCA9IGlzYXJyYXkgPyBbXSA6IHt9O1xuICAgICAgbGV0IGtleXM7XG4gICAgICAvLyBhbiBvYmplY3QvYXJyYXlcbiAgICAgIGlmIChhT2JqZWN0LmNvbnN0cnVjdG9yID09PSBPYmplY3QgfHwgQXJyYXkuaXNBcnJheShhT2JqZWN0KSkge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMoYU9iamVjdCk7XG4gICAgICB9XG4gICAgICAvLyBhIGNsYXNzXG4gICAgICBlbHNlIGlmIChhT2JqZWN0LmNvbnN0cnVjdG9yID09PSBGdW5jdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgaW5zdGFudGlhdGUgdGhlIGNsYXNzIGJlZm9yZSBleHBvcnR0aW5nIGl0LlwiKTtcbiAgICAgIH1cbiAgICAgIC8vIGluc3RhbmNlIG9mIGEgY2xhc3NcbiAgICAgIGVsc2UgaWYgKGFPYmplY3QuY29uc3RydWN0b3IuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhcbiAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYU9iamVjdClcbiAgICAgICAgKS5jb25jYXQoT2JqZWN0LmtleXMoYU9iamVjdCkpO1xuICAgICAgICAvLyBUT0RPOiB1c2UgYSBwcm94eSBvYmplY3QgdG8gcmVwcmVzZW50IHRoZSBhY3R1YWwgb2JqZWN0XG4gICAgICAgIC8vIGFsd2F5cyBlbmNvZGUgY2xhc3MgaW5zdGFuY2UgYXMgaW50ZXJmYWNlXG4gICAgICAgIGFzSW50ZXJmYWNlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiVW5zdXBwb3J0ZWQgaW50ZXJmYWNlIHR5cGVcIik7XG4gICAgICB9XG4gICAgICAvLyBlbmNvZGUgaW50ZXJmYWNlc1xuICAgICAgaWYgKGFPYmplY3QuX3JpbnRmIHx8IGFzSW50ZXJmYWNlKSB7XG4gICAgICAgIGlmICghb2JqZWN0SWQpIHtcbiAgICAgICAgICBvYmplY3RJZCA9IHJhbmRJZCgpO1xuICAgICAgICAgIHRoaXMuX29iamVjdF9zdG9yZVtvYmplY3RJZF0gPSBhT2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGsgb2Yga2V5cykge1xuICAgICAgICAgIGlmIChrID09PSBcImNvbnN0cnVjdG9yXCIpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChrLnN0YXJ0c1dpdGgoXCJfXCIpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYk9iamVjdFtrXSA9IGF3YWl0IHRoaXMuX2VuY29kZShcbiAgICAgICAgICAgIGFPYmplY3Rba10sXG4gICAgICAgICAgICB0eXBlb2YgYXNJbnRlcmZhY2UgPT09IFwic3RyaW5nXCIgPyBhc0ludGVyZmFjZSArIFwiLlwiICsgayA6IGssXG4gICAgICAgICAgICBvYmplY3RJZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGlkIGZvciBkaXNwb3NlIHRoZSBvYmplY3QgcmVtb3RlbHlcbiAgICAgICAgYk9iamVjdC5fcmludGYgPSBvYmplY3RJZDtcbiAgICAgICAgLy8gcmVtb3ZlIGludGVyZmFjZSB3aGVuIGNsb3NlZFxuICAgICAgICBpZiAoYU9iamVjdC5vbiAmJiB0eXBlb2YgYU9iamVjdC5vbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgYU9iamVjdC5vbihcImNsb3NlXCIsICgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vYmplY3Rfc3RvcmVbb2JqZWN0SWRdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBrIG9mIGtleXMpIHtcbiAgICAgICAgICBpZiAoW1wiaGFzT3duUHJvcGVydHlcIiwgXCJjb25zdHJ1Y3RvclwiXS5pbmNsdWRlcyhrKSkgY29udGludWU7XG4gICAgICAgICAgYk9iamVjdFtrXSA9IGF3YWl0IHRoaXMuX2VuY29kZShhT2JqZWN0W2tdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZm9yIGV4YW1wbGUsIGJyb3dzZXJGUyBvYmplY3RcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhT2JqZWN0ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoXG4gICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihhT2JqZWN0KVxuICAgICAgKS5jb25jYXQoT2JqZWN0LmtleXMoYU9iamVjdCkpO1xuICAgICAgY29uc3Qgb2JqZWN0SWQgPSByYW5kSWQoKTtcblxuICAgICAgZm9yIChsZXQgayBvZiBrZXlzKSB7XG4gICAgICAgIGlmIChbXCJoYXNPd25Qcm9wZXJ0eVwiLCBcImNvbnN0cnVjdG9yXCJdLmluY2x1ZGVzKGspKSBjb250aW51ZTtcbiAgICAgICAgLy8gZW5jb2RlIGFzIGludGVyZmFjZVxuICAgICAgICBiT2JqZWN0W2tdID0gYXdhaXQgdGhpcy5fZW5jb2RlKGFPYmplY3Rba10sIGssIGJPYmplY3QpO1xuICAgICAgfVxuICAgICAgLy8gb2JqZWN0IGlkLCB1c2VkIGZvciBkaXNwb3NlIHRoZSBvYmplY3RcbiAgICAgIGJPYmplY3QuX3JpbnRmID0gb2JqZWN0SWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFwiaW1qb3ktcnBjOiBVbnN1cHBvcnRlZCBkYXRhIHR5cGU6XCIgKyBhT2JqZWN0O1xuICAgIH1cblxuICAgIGlmICh0cmFuc2ZlcmFibGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGJPYmplY3QuX190cmFuc2ZlcmFibGVzX18gPSB0cmFuc2ZlcmFibGVzO1xuICAgIH1cbiAgICBpZiAoIWJPYmplY3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBlbmNvZGUgb2JqZWN0XCIpO1xuICAgIH1cbiAgICByZXR1cm4gYk9iamVjdDtcbiAgfVxuXG4gIGFzeW5jIF9kZWNvZGUoYU9iamVjdCwgd2l0aFByb21pc2UpIHtcbiAgICBpZiAoIWFPYmplY3QpIHtcbiAgICAgIHJldHVybiBhT2JqZWN0O1xuICAgIH1cbiAgICBsZXQgYk9iamVjdDtcbiAgICBpZiAoYU9iamVjdFtcIl9ydHlwZVwiXSkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9jb2RlY3NbYU9iamVjdC5fcnR5cGVdICYmXG4gICAgICAgIHRoaXMuX2NvZGVjc1thT2JqZWN0Ll9ydHlwZV0uZGVjb2RlclxuICAgICAgKSB7XG4gICAgICAgIGlmIChhT2JqZWN0Ll9yaW50Zikge1xuICAgICAgICAgIGNvbnN0IHRlbXAgPSBhT2JqZWN0Ll9ydHlwZTtcbiAgICAgICAgICBkZWxldGUgYU9iamVjdC5fcnR5cGU7XG4gICAgICAgICAgYU9iamVjdCA9IGF3YWl0IHRoaXMuX2RlY29kZShhT2JqZWN0LCB3aXRoUHJvbWlzZSk7XG4gICAgICAgICAgYU9iamVjdC5fcnR5cGUgPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICAgIGJPYmplY3QgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgdGhpcy5fY29kZWNzW2FPYmplY3QuX3J0eXBlXS5kZWNvZGVyKGFPYmplY3QpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGFPYmplY3QuX3J0eXBlID09PSBcImNhbGxiYWNrXCIpIHtcbiAgICAgICAgYk9iamVjdCA9IHRoaXMuX2dlblJlbW90ZUNhbGxiYWNrKFxuICAgICAgICAgIGFPYmplY3QuX3J0YXJnZXRfaWQsXG4gICAgICAgICAgYU9iamVjdC5fcnZhbHVlLFxuICAgICAgICAgIHdpdGhQcm9taXNlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGFPYmplY3QuX3J0eXBlID09PSBcImludGVyZmFjZVwiKSB7XG4gICAgICAgIGJPYmplY3QgPSB0aGlzLl9nZW5SZW1vdGVNZXRob2QoXG4gICAgICAgICAgYU9iamVjdC5fcnRhcmdldF9pZCxcbiAgICAgICAgICBhT2JqZWN0Ll9ydmFsdWUsXG4gICAgICAgICAgYU9iamVjdC5fcmludGZcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoYU9iamVjdC5fcnR5cGUgPT09IFwibmRhcnJheVwiKSB7XG4gICAgICAgIC8qZ2xvYmFsIG5qIHRmKi9cbiAgICAgICAgLy9jcmVhdGUgYnVpbGQgYXJyYXkvdGVuc29yIGlmIHVzZWQgaW4gdGhlIHBsdWdpblxuICAgICAgICBpZiAodHlwZW9mIG5qICE9PSBcInVuZGVmaW5lZFwiICYmIG5qLmFycmF5KSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYU9iamVjdC5fcnZhbHVlKSkge1xuICAgICAgICAgICAgYU9iamVjdC5fcnZhbHVlID0gYU9iamVjdC5fcnZhbHVlLnJlZHVjZShfYXBwZW5kQnVmZmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYk9iamVjdCA9IG5qXG4gICAgICAgICAgICAuYXJyYXkobmV3IFVpbnQ4KGFPYmplY3QuX3J2YWx1ZSksIGFPYmplY3QuX3JkdHlwZSlcbiAgICAgICAgICAgIC5yZXNoYXBlKGFPYmplY3QuX3JzaGFwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRmICE9PSBcInVuZGVmaW5lZFwiICYmIHRmLlRlbnNvcikge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFPYmplY3QuX3J2YWx1ZSkpIHtcbiAgICAgICAgICAgIGFPYmplY3QuX3J2YWx1ZSA9IGFPYmplY3QuX3J2YWx1ZS5yZWR1Y2UoX2FwcGVuZEJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGFycmF5dHlwZSA9IGV2YWwoZHR5cGVUb1R5cGVkQXJyYXlbYU9iamVjdC5fcmR0eXBlXSk7XG4gICAgICAgICAgYk9iamVjdCA9IHRmLnRlbnNvcihcbiAgICAgICAgICAgIG5ldyBhcnJheXR5cGUoYU9iamVjdC5fcnZhbHVlKSxcbiAgICAgICAgICAgIGFPYmplY3QuX3JzaGFwZSxcbiAgICAgICAgICAgIGFPYmplY3QuX3JkdHlwZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9rZWVwIGl0IGFzIHJlZ3VsYXIgaWYgdHJhbnNmZXJlZCB0byB0aGUgbWFpbiBhcHBcbiAgICAgICAgICBiT2JqZWN0ID0gYU9iamVjdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgIGJPYmplY3QgPSBuZXcgRXJyb3IoYU9iamVjdC5fcnZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoYU9iamVjdC5fcnR5cGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgIGlmIChhT2JqZWN0Ll9ydmFsdWUgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICAgICAgYk9iamVjdCA9IGFPYmplY3QuX3J2YWx1ZTtcbiAgICAgICAgICAvL3BhdGNoIF9wYXRoXG4gICAgICAgICAgYk9iamVjdC5fcGF0aCA9IGFPYmplY3QuX3JwYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJPYmplY3QgPSBuZXcgRmlsZShbYU9iamVjdC5fcnZhbHVlXSwgYU9iamVjdC5fcm5hbWUsIHtcbiAgICAgICAgICAgIHR5cGU6IGFPYmplY3QuX3JtaW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYk9iamVjdC5fcGF0aCA9IGFPYmplY3QuX3JwYXRoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFPYmplY3QuX3J0eXBlID09PSBcInR5cGVkYXJyYXlcIikge1xuICAgICAgICBjb25zdCBhcnJheXR5cGUgPSBldmFsKGR0eXBlVG9UeXBlZEFycmF5W2FPYmplY3QuX3JkdHlwZV0pO1xuICAgICAgICBpZiAoIWFycmF5dHlwZSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBkdHlwZTogXCIgKyBhT2JqZWN0Ll9yZHR5cGUpO1xuICAgICAgICBiT2JqZWN0ID0gbmV3IGFycmF5dHlwZShhT2JqZWN0Ll9ydmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXCJtZW1vcnl2aWV3XCIpIHtcbiAgICAgICAgYk9iamVjdCA9IG5ldyBEYXRhVmlldyhhT2JqZWN0Ll9ydmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXCJibG9iXCIpIHtcbiAgICAgICAgaWYgKGFPYmplY3QuX3J2YWx1ZSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICBiT2JqZWN0ID0gYU9iamVjdC5fcnZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJPYmplY3QgPSBuZXcgQmxvYihbYU9iamVjdC5fcnZhbHVlXSwgeyB0eXBlOiBhT2JqZWN0Ll9ybWltZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXCJvcmRlcmVkbWFwXCIpIHtcbiAgICAgICAgYk9iamVjdCA9IG5ldyBNYXAoYXdhaXQgdGhpcy5fZGVjb2RlKGFPYmplY3QuX3J2YWx1ZSwgd2l0aFByb21pc2UpKTtcbiAgICAgIH0gZWxzZSBpZiAoYU9iamVjdC5fcnR5cGUgPT09IFwic2V0XCIpIHtcbiAgICAgICAgYk9iamVjdCA9IG5ldyBTZXQoYXdhaXQgdGhpcy5fZGVjb2RlKGFPYmplY3QuX3J2YWx1ZSwgd2l0aFByb21pc2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSBhbGwgdGhlIGludGVyZmFjZSBmdW5jdGlvbnMgYXJlIGRlY29kZWRcbiAgICAgICAgaWYgKGFPYmplY3QuX3JpbnRmKSB7XG4gICAgICAgICAgY29uc3QgdGVtcCA9IGFPYmplY3QuX3J0eXBlO1xuICAgICAgICAgIGRlbGV0ZSBhT2JqZWN0Ll9ydHlwZTtcbiAgICAgICAgICBhT2JqZWN0ID0gYXdhaXQgdGhpcy5fZGVjb2RlKGFPYmplY3QsIHdpdGhQcm9taXNlKTtcbiAgICAgICAgICBhT2JqZWN0Ll9ydHlwZSA9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgICAgYk9iamVjdCA9IGFPYmplY3Q7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhT2JqZWN0LmNvbnN0cnVjdG9yID09PSBPYmplY3QgfHwgQXJyYXkuaXNBcnJheShhT2JqZWN0KSkge1xuICAgICAgY29uc3QgaXNhcnJheSA9IEFycmF5LmlzQXJyYXkoYU9iamVjdCk7XG4gICAgICBiT2JqZWN0ID0gaXNhcnJheSA/IFtdIDoge307XG4gICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGFPYmplY3QpKSB7XG4gICAgICAgIGlmIChpc2FycmF5IHx8IGFPYmplY3QuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICBjb25zdCB2ID0gYU9iamVjdFtrXTtcbiAgICAgICAgICBiT2JqZWN0W2tdID0gYXdhaXQgdGhpcy5fZGVjb2RlKHYsIHdpdGhQcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBiT2JqZWN0ID0gYU9iamVjdDtcbiAgICB9XG4gICAgaWYgKGJPYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY29kZSBvYmplY3RcIik7XG4gICAgfVxuICAgIC8vIHN0b3JlIHRoZSBvYmplY3QgaWQgZm9yIGRpc3Bvc2VcbiAgICBpZiAoYU9iamVjdC5fcmludGYpIHtcbiAgICAgIHRoaXMuX29iamVjdF93ZWFrbWFwLnNldChiT2JqZWN0LCBhT2JqZWN0Ll9yaW50Zik7XG4gICAgfVxuICAgIHJldHVybiBiT2JqZWN0O1xuICB9XG5cbiAgYXN5bmMgX3dyYXAoYXJncywgYXNJbnRlcmZhY2UpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fZW5jb2RlKGFyZ3MsIGFzSW50ZXJmYWNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbndyYXBzIHRoZSBzZXQgb2YgYXJndW1lbnRzIGRlbGl2ZXJlZCBmcm9tIHRoZSByZW1vdGUgc2l0ZSxcbiAgICogcmVwbGFjZXMgYWxsIGNhbGxiYWNrIGlkZW50aWZpZXJzIHdpdGggYSBmdW5jdGlvbiB3aGljaCB3aWxsXG4gICAqIGluaXRpYXRlIHNlbmRpbmcgdGhhdCBjYWxsYmFjayBpZGVudGlmaWVyIGJhY2sgdG8gb3RoZXIgc2l0ZVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYXJncyB0byB1bndyYXBcbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSB3aXRoUHJvbWlzZSBpcyB0cnVlIG1lYW5zIHRoaXMgdGhlIGNhbGxiYWNrIHNob3VsZCBjb250YWluIGEgcHJvbWlzZVxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHVud3JhcHBlZCBhcmdzXG4gICAqL1xuICBhc3luYyBfdW53cmFwKGFyZ3MsIHdpdGhQcm9taXNlKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX2RlY29kZShhcmdzLCB3aXRoUHJvbWlzZSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIGNvcnJlc3BvbmRpbmcgdG8gYSBzaW5nbGUgcmVtb3RlXG4gICAqIGNhbGxiYWNrLiBXaGVuIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb24gaXMgY2FsbGVkLCBpdCB3aWxsIHNlbmRcbiAgICogdGhlIGNvcnJlc3BvbmRpbmcgbWVzc2FnZSB0byB0aGUgcmVtb3RlIHNpdGUgYXNraW5nIGl0IHRvXG4gICAqIGV4ZWN1dGUgdGhlIHBhcnRpY3VsYXIgY2FsbGJhY2sgcHJldmlvdXNseSBzYXZlZCBkdXJpbmcgYSBjYWxsXG4gICAqIGJ5IHRoZSByZW1vdGUgc2l0ZSBhIG1ldGhvZCBmcm9tIHRoZSBpbnRlcmZhY2Ugb2YgdGhpcyBzaXRlXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBvZiB0aGUgcmVtb3RlIGNhbGxiYWNrIHRvIGV4ZWN1dGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFyZ051bSBhcmd1bWVudCBpbmRleCBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtCb29sZWFufSB3aXRoUHJvbWlzZSBpcyB0cnVlIG1lYW5zIHRoaXMgdGhlIGNhbGxiYWNrIHNob3VsZCBjb250YWluIGEgcHJvbWlzZVxuICAgKlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IHdyYXBwZWQgcmVtb3RlIGNhbGxiYWNrXG4gICAqL1xuICBfZ2VuUmVtb3RlQ2FsbGJhY2sodGFyZ2V0SWQsIGNpZCwgd2l0aFByb21pc2UpIHtcbiAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgbGV0IHJlbW90ZUNhbGxiYWNrO1xuICAgIGlmICh3aXRoUHJvbWlzZSkge1xuICAgICAgcmVtb3RlQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCBhcmdzID0gYXdhaXQgbWUuX3dyYXAoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgICAgY29uc3QgdHJhbnNmZXJhYmxlcyA9IGFyZ3MuX190cmFuc2ZlcmFibGVzX187XG4gICAgICAgICAgaWYgKHRyYW5zZmVyYWJsZXMpIGRlbGV0ZSBhcmdzLl9fdHJhbnNmZXJhYmxlc19fO1xuXG4gICAgICAgICAgY29uc3QgZW5jb2RlZFByb21pc2UgPSBhd2FpdCBtZS5fd3JhcChbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICAgICAgLy8gc3RvcmUgdGhlIGtleSBpZCBmb3IgcmVtb3ZpbmcgdGhlbSBmcm9tIHRoZSByZWZlcmVuY2Ugc3RvcmUgdG9nZXRoZXJcbiAgICAgICAgICByZXNvbHZlLl9fcHJvbWlzZV9wYWlyID0gZW5jb2RlZFByb21pc2VbMV0uX3J2YWx1ZTtcbiAgICAgICAgICByZWplY3QuX19wcm9taXNlX3BhaXIgPSBlbmNvZGVkUHJvbWlzZVswXS5fcnZhbHVlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtZS5fY29ubmVjdGlvbi5lbWl0KFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjYWxsYmFja1wiLFxuICAgICAgICAgICAgICAgIHRhcmdldF9pZDogdGFyZ2V0SWQsXG4gICAgICAgICAgICAgICAgaWQ6IGNpZCxcbiAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgICAgIHByb21pc2U6IGVuY29kZWRQcm9taXNlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHRyYW5zZmVyYWJsZXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGBGYWlsZWQgdG8gZXhlY3R1ZSByZW1vdGUgY2FsbGJhY2sgKCBpZDogJHtjaWR9KS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHJldHVybiByZW1vdGVDYWxsYmFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3RlQ2FsbGJhY2sgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IGF3YWl0IG1lLl93cmFwKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICBjb25zdCB0cmFuc2ZlcmFibGVzID0gYXJncy5fX3RyYW5zZmVyYWJsZXNfXztcbiAgICAgICAgaWYgKHRyYW5zZmVyYWJsZXMpIGRlbGV0ZSBhcmdzLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgICAgICByZXR1cm4gbWUuX2Nvbm5lY3Rpb24uZW1pdChcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImNhbGxiYWNrXCIsXG4gICAgICAgICAgICB0YXJnZXRfaWQ6IHRhcmdldElkLFxuICAgICAgICAgICAgaWQ6IGNpZCxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3NcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRyYW5zZmVyYWJsZXNcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVtb3RlQ2FsbGJhY2s7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBub3RpZmljYXRpb24gbWVzc2FnZSBhbmQgYnJlYWtzIHRoZSBjb25uZWN0aW9uXG4gICAqL1xuICBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7IHR5cGU6IFwiZGlzY29ubmVjdFwiIH0pO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fY29ubmVjdGlvbi5kaXNjb25uZWN0KCk7XG4gICAgfSwgMjAwMCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWZlcmVuY2VTdG9yZSBpcyBhIHNwZWNpYWwgb2JqZWN0IHdoaWNoIHN0b3JlcyBvdGhlciBvYmplY3RzXG4gKiBhbmQgcHJvdmlkZXMgdGhlIHJlZmVyZW5jZXMgKG51bWJlcikgaW5zdGVhZC4gVGhpcyByZWZlcmVuY2VcbiAqIG1heSB0aGVuIGJlIHNlbnQgb3ZlciBhIGpzb24tYmFzZWQgY29tbXVuaWNhdGlvbiBjaGFubmVsIChJUENcbiAqIHRvIGFub3RoZXIgTm9kZS5qcyBwcm9jZXNzIG9yIGEgbWVzc2FnZSB0byB0aGUgV29ya2VyKS4gT3RoZXJcbiAqIHNpdGUgbWF5IHRoZW4gcHJvdmlkZSB0aGUgcmVmZXJlbmNlIGluIHRoZSByZXNwb25jZSBtZXNzYWdlXG4gKiBpbXBseWluZyB0aGUgZ2l2ZW4gb2JqZWN0IHNob3VsZCBiZSBhY3RpdmF0ZWQuXG4gKlxuICogUHJpbWFyeSB1c2FnZSBmb3IgdGhlIFJlZmVyZW5jZVN0b3JlIGlzIGEgc3RvcmFnZSBmb3IgdGhlXG4gKiBjYWxsYmFja3MsIHdoaWNoIHRoZXJlZm9yZSBtYWtlcyBpdCBwb3NzaWJsZSB0byBpbml0aWF0ZSBhXG4gKiBjYWxsYmFjayBleGVjdXRpb24gYnkgdGhlIG9wcG9zaXRlIHNpdGUgKHdoaWNoIG5vcm1hbGx5IGNhbm5vdFxuICogZGlyZWN0bHkgZXhlY3V0ZSBmdW5jdGlvbnMgb3ZlciB0aGUgY29tbXVuaWNhdGlvbiBjaGFubmVsKS5cbiAqXG4gKiBFYWNoIHN0b3JlZCBvYmplY3QgY2FuIG9ubHkgYmUgZmV0Y2hlZCBvbmNlIGFuZCBpcyBub3RcbiAqIGF2YWlsYWJsZSBmb3IgdGhlIHNlY29uZCB0aW1lLiBFYWNoIHN0b3JlZCBvYmplY3QgbXVzdCBiZVxuICogZmV0Y2hlZCwgc2luY2Ugb3RoZXJ3aXNlIGl0IHdpbGwgcmVtYWluIHN0b3JlZCBmb3JldmVyIGFuZFxuICogY29uc3VtZSBtZW1vcnkuXG4gKlxuICogU3RvcmVkIG9iamVjdCBpbmRlY2VzIGFyZSBzaW1wbHkgdGhlIG51bWJlcnMsIHdoaWNoIGFyZSBob3dldmVyXG4gKiByZWxlYXNlZCBhbG9uZyB3aXRoIHRoZSBvYmplY3RzLCBhbmQgYXJlIGxhdGVyIHJldXNlZCBhZ2FpbiAoaW5cbiAqIG9yZGVyIHRvIHBvc3Rwb25lIHRoZSBvdmVyZmxvdywgd2hpY2ggc2hvdWxkIG5vdCBsaWtlbHkgaGFwcGVuLFxuICogYnV0IGFueXdheSkuXG4gKi9cbmNsYXNzIFJlZmVyZW5jZVN0b3JlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fc3RvcmUgPSB7fTsgLy8gc3RvcmVkIG9iamVjdFxuICAgIHRoaXMuX2luZGljZXMgPSBbMF07IC8vIHNtYWxsZXN0IGF2YWlsYWJsZSBpbmRpY2VzXG4gICAgdGhpcy5fcmVhZHlIYW5kbGVyID0gZnVuY3Rpb24oKSB7fTtcbiAgICB0aGlzLl9idXN5SGFuZGxlciA9IGZ1bmN0aW9uKCkge307XG4gICAgdGhpcy5fcmVhZHlIYW5kbGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogY2FsbCBoYW5kbGVyIHdoZW4gdGhlIHN0b3JlIGlzIGVtcHR5XG4gICAqXG4gICAqIEBwYXJhbSB7RlVOQ1RJT059IGlkIG9mIGEgaGFuZGxlclxuICAgKi9cbiAgb25SZWFkeShyZWFkeUhhbmRsZXIpIHtcbiAgICB0aGlzLl9yZWFkeUhhbmRsZXIgPSByZWFkeUhhbmRsZXIgfHwgZnVuY3Rpb24oKSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjYWxsIGhhbmRsZXIgd2hlbiB0aGUgc3RvcmUgaXMgbm90IGVtcHR5XG4gICAqXG4gICAqIEBwYXJhbSB7RlVOQ1RJT059IGlkIG9mIGEgaGFuZGxlclxuICAgKi9cbiAgb25CdXN5KGJ1c3lIYW5kbGVyKSB7XG4gICAgdGhpcy5fYnVzeUhhbmRsZXIgPSBidXN5SGFuZGxlciB8fCBmdW5jdGlvbigpIHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCB0aGUgbGVuZ3RoIG9mIHRoZSBzdG9yZVxuICAgKlxuICAgKi9cbiAgZ2V0U3RhY2soKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3N0b3JlKS5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIF9nZW5JZCgpIGdlbmVyYXRlcyB0aGUgbmV3IHJlZmVyZW5jZSBpZFxuICAgKlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBzbWFsbGVzdCBhdmFpbGFibGUgaWQgYW5kIHJlc2VydmVzIGl0XG4gICAqL1xuICBfZ2VuSWQoKSB7XG4gICAgbGV0IGlkO1xuICAgIGlmICh0aGlzLl9pbmRpY2VzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWQgPSB0aGlzLl9pbmRpY2VzWzBdKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkID0gdGhpcy5faW5kaWNlcy5zaGlmdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgZ2l2ZW4gcmVmZXJlbmNlIGlkIHNvIHRoYXQgaXQgd2lsbCBiZSBhdmFpbGFibGUgYnlcbiAgICogYW5vdGhlciBvYmplY3Qgc3RvcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCB0byByZWxlYXNlXG4gICAqL1xuICBfcmVsZWFzZUlkKGlkKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaWQgPCB0aGlzLl9pbmRpY2VzW2ldKSB7XG4gICAgICAgIHRoaXMuX2luZGljZXMuc3BsaWNlKGksIDAsIGlkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2xlYW5pbmctdXAgdGhlIHNlcXVlbmNlIHRhaWxcbiAgICBmb3IgKGxldCBpID0gdGhpcy5faW5kaWNlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHRoaXMuX2luZGljZXNbaV0gLSAxID09PSB0aGlzLl9pbmRpY2VzW2kgLSAxXSkge1xuICAgICAgICB0aGlzLl9pbmRpY2VzLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyB0aGUgZ2l2ZW4gb2JqZWN0IGFuZCByZXR1cm5zIHRoZSByZWZlcm5jZSBpZCBpbnN0ZWFkXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogdG8gc3RvcmVcbiAgICpcbiAgICogQHJldHVybnMge051bWJlcn0gcmVmZXJlbmNlIGlkIG9mIHRoZSBzdG9yZWQgb2JqZWN0XG4gICAqL1xuICBwdXQob2JqKSB7XG4gICAgaWYgKHRoaXMuX2J1c3lIYW5kbGVyICYmIE9iamVjdC5rZXlzKHRoaXMuX3N0b3JlKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX2J1c3lIYW5kbGVyKCk7XG4gICAgfVxuICAgIGNvbnN0IGlkID0gdGhpcy5fZ2VuSWQoKTtcbiAgICB0aGlzLl9zdG9yZVtpZF0gPSBvYmo7XG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBwcmV2aW91c2x5IHN0b3JlZCBvYmplY3QgYW5kIHJlbGVhc2VzIGl0cyByZWZlcmVuY2VcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIG9mIGFuIG9iamVjdCB0byByZXRyaWV2ZVxuICAgKi9cbiAgZmV0Y2goaWQpIHtcbiAgICBjb25zdCBvYmogPSB0aGlzLl9zdG9yZVtpZF07XG4gICAgaWYgKG9iaiAmJiAhb2JqLl9fcmVtb3RlX21ldGhvZCkge1xuICAgICAgZGVsZXRlIHRoaXMuX3N0b3JlW2lkXTtcbiAgICAgIHRoaXMuX3JlbGVhc2VJZChpZCk7XG4gICAgICBpZiAodGhpcy5fcmVhZHlIYW5kbGVyICYmIE9iamVjdC5rZXlzKHRoaXMuX3N0b3JlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fcmVhZHlIYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvYmogJiYgb2JqLl9fcHJvbWlzZV9wYWlyKSB7XG4gICAgICB0aGlzLmZldGNoKG9iai5fX3Byb21pc2VfcGFpcik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztBQUlBO0FBT0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBOzs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBOzs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBOzs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUVBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBVUE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBOzs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUFBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUVBO0FBUkE7QUFrQkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUZBO0FBS0E7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUtBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7Ozs7OztBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFRQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExMEJBO0FBNDBCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBOUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/rpc.js\n')},"./src/utils.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randId", function() { return randId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dtypeToTypedArray", function() { return dtypeToTypedArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "typedArrayToDtype", function() { return typedArrayToDtype; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cacheRequirements", function() { return cacheRequirements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupServiceWorker", function() { return setupServiceWorker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlJoin", function() { return urlJoin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageEmitter", function() { return MessageEmitter; });\nfunction randId() {\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\n}\nconst dtypeToTypedArray = {\n  int8: "Int8Array",\n  int16: "Int16Array",\n  int32: "Int32Array",\n  uint8: "Uint8Array",\n  uint16: "Uint16Array",\n  uint32: "Uint32Array",\n  float32: "Float32Array",\n  float64: "Float64Array",\n  array: "Array"\n};\nconst typedArrayToDtype = {\n  Int8Array: "int8",\n  Int16Array: "int16",\n  Int32Array: "int32",\n  Uint8Array: "uint8",\n  Uint16Array: "uint16",\n  Uint32Array: "uint32",\n  Float32Array: "float32",\n  Float64Array: "float64",\n  Array: "array"\n};\n\nfunction cacheUrlInServiceWorker(url) {\n  return new Promise(function (resolve, reject) {\n    const message = {\n      command: "add",\n      url: url\n    };\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\n      reject("Service worker is not supported.");\n      return;\n    }\n\n    const messageChannel = new MessageChannel();\n\n    messageChannel.port1.onmessage = function (event) {\n      if (event.data && event.data.error) {\n        reject(event.data.error);\n      } else {\n        resolve(event.data && event.data.result);\n      }\n    };\n\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n    } else {\n      reject("Service worker controller is not available");\n    }\n  });\n}\n\nasync function cacheRequirements(requirements) {\n  if (!Array.isArray(requirements)) {\n    requirementsm.code.requirements = [requirements];\n  }\n\n  if (requirements && requirements.length > 0) {\n    for (let req of requirements) {\n      //remove prefix\n      if (req.startsWith("js:")) req = req.slice(3);\n      if (req.startsWith("css:")) req = req.slice(4);\n      if (req.startsWith("cache:")) req = req.slice(6);\n      if (!req.startsWith("http")) continue;\n      await cacheUrlInServiceWorker(req).catch(e => {\n        console.error(e);\n      });\n    }\n  }\n}\nfunction setupServiceWorker(baseUrl, targetOrigin, cacheCallback) {\n  // register service worker for offline access\n  if ("serviceWorker" in navigator) {\n    baseUrl = baseUrl || "/";\n    navigator.serviceWorker.register(baseUrl + "plugin-service-worker.js").then(function (registration) {\n      // Registration was successful\n      console.log("ServiceWorker registration successful with scope: ", registration.scope);\n    }, function (err) {\n      // registration failed :(\n      console.log("ServiceWorker registration failed: ", err);\n    });\n    targetOrigin = targetOrigin || "*";\n    cacheCallback = cacheCallback || cacheRequirements;\n\n    if (cacheCallback && typeof cacheCallback !== "function") {\n      throw new Error("config.cache_requirements must be a function");\n    }\n\n    window.addEventListener("message", function (e) {\n      if (targetOrigin === "*" || e.origin === targetOrigin) {\n        const m = e.data;\n\n        if (m.type === "cacheRequirements") {\n          cacheCallback(m.requirements);\n        }\n      }\n    });\n  }\n} //#Source https://bit.ly/2neWfJ2\n\nfunction urlJoin(...args) {\n  return args.join("/").replace(/[\\/]+/g, "/").replace(/^(.+):\\//, "$1://").replace(/^file:/, "file:/").replace(/\\/(\\?|&|#[^!])/g, "$1").replace(/\\?/g, "&").replace("&", "?");\n}\nclass MessageEmitter {\n  constructor(debug) {\n    this._event_handlers = {};\n    this._once_handlers = {};\n    this._debug = debug;\n  }\n\n  emit() {\n    throw new Error("emit is not implemented");\n  }\n\n  on(event, handler) {\n    if (!this._event_handlers[event]) {\n      this._event_handlers[event] = [];\n    }\n\n    this._event_handlers[event].push(handler);\n  }\n\n  once(event, handler) {\n    handler.___event_run_once = true;\n    this.on(event, handler);\n  }\n\n  off(event, handler) {\n    if (!event && !handler) {\n      // remove all events handlers\n      this._event_handlers = {};\n    } else if (event && !handler) {\n      // remove all hanlders for the event\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\n    } else {\n      // remove a specific handler\n      if (this._event_handlers[event]) {\n        const idx = this._event_handlers[event].indexOf(handler);\n\n        if (idx >= 0) {\n          this._event_handlers[event].splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  _fire(event, data) {\n    if (this._event_handlers[event]) {\n      var i = this._event_handlers[event].length;\n\n      while (i--) {\n        const handler = this._event_handlers[event][i];\n\n        try {\n          handler(data);\n        } catch (e) {\n          console.error(e);\n        } finally {\n          if (handler.___event_run_once) {\n            this._event_handlers[event].splice(i, 1);\n          }\n        }\n      }\n    } else {\n      if (this._debug) {\n        console.warn("unhandled event", event, data);\n      }\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils.js\n')}})},module.exports=factory()}}]);